// Code generated by "gen-cefingo.go" DO NOT EDIT.

package capi

import (
	"sync"
	"time"
	"unsafe"
)

// #include "cefingo.h"
import "C"

var cefingoIfaceAccess sync.Mutex

// cef_string_list.h, include/internal/cef_string_list.h:44:15,

///
// CEF string maps are a set of key/value string pairs.
///
type CStringListT C.cef_string_list_t

///
// Allocate a new string map.
///
func StringListAlloc() (ret CStringListT) {

	cRet := C.cef_string_list_alloc()

	ret = (CStringListT)(cRet)
	return ret
}

///
// Return the number of elements in the string list.
///
func StringListSize(
	list CStringListT,
) (ret int64) {

	cRet := C.cef_string_list_size((C.cef_string_list_t)(list))

	ret = (int64)(cRet)
	return ret
}

///
// Retrieve the value at the specified zero-based string list index. Returns
// true (1) if the value was successfully retrieved.
///
func StringListValue(
	list CStringListT,
	index int64,
) (ret bool, value string) {
	tmpc_value := create_cef_string("")

	cRet := C.cef_string_list_value((C.cef_string_list_t)(list), (C.size_t)(index), tmpc_value.p_cef_string_t)

	value = string_from_cef_string(tmpc_value.p_cef_string_t)

	ret = cRet == 1
	return ret, value
}

///
// Append a new value at the end of the string list.
///
func StringListAppend(
	list CStringListT,
	value string,
) {
	c_value := create_cef_string(value)

	C.cef_string_list_append((C.cef_string_list_t)(list), c_value.p_cef_string_t)

}

///
// Clear the string list.
///
func StringListClear(
	list CStringListT,
) {

	C.cef_string_list_clear((C.cef_string_list_t)(list))

}

///
// Free the string list.
///
func StringListFree(
	list CStringListT,
) {

	C.cef_string_list_free((C.cef_string_list_t)(list))

}

///
// Creates a copy of an existing string list.
///
func StringListCopy(
	list CStringListT,
) (ret CStringListT) {

	cRet := C.cef_string_list_copy((C.cef_string_list_t)(list))

	ret = (CStringListT)(cRet)
	return ret
}

// cef_string_map.h, include/internal/cef_string_map.h:44:15,

///
// CEF string maps are a set of key/value string pairs.
///
type CStringMapT C.cef_string_map_t

///
// Allocate a new string map.
///
func StringMapAlloc() (ret CStringMapT) {

	cRet := C.cef_string_map_alloc()

	ret = (CStringMapT)(cRet)
	return ret
}

///
// Return the number of elements in the string map.
///
func StringMapSize(
	cmap CStringMapT,
) (ret int64) {

	cRet := C.cef_string_map_size((C.cef_string_map_t)(cmap))

	ret = (int64)(cRet)
	return ret
}

///
// Return the value assigned to the specified key.
///
func StringMapFind(
	cmap CStringMapT,
	key string,
) (ret bool, value string) {
	c_key := create_cef_string(key)
	tmpc_value := create_cef_string("")

	cRet := C.cef_string_map_find((C.cef_string_map_t)(cmap), c_key.p_cef_string_t, tmpc_value.p_cef_string_t)

	value = string_from_cef_string(tmpc_value.p_cef_string_t)

	ret = cRet == 1
	return ret, value
}

///
// Return the key at the specified zero-based string map index.
///
func StringMapKey(
	cmap CStringMapT,
	index int64,
) (ret bool, key string) {
	tmpc_key := create_cef_string("")

	cRet := C.cef_string_map_key((C.cef_string_map_t)(cmap), (C.size_t)(index), tmpc_key.p_cef_string_t)

	key = string_from_cef_string(tmpc_key.p_cef_string_t)

	ret = cRet == 1
	return ret, key
}

///
// Return the value at the specified zero-based string map index.
///
func StringMapValue(
	cmap CStringMapT,
	index int64,
) (ret bool, value string) {
	tmpc_value := create_cef_string("")

	cRet := C.cef_string_map_value((C.cef_string_map_t)(cmap), (C.size_t)(index), tmpc_value.p_cef_string_t)

	value = string_from_cef_string(tmpc_value.p_cef_string_t)

	ret = cRet == 1
	return ret, value
}

///
// Append a new key/value pair at the end of the string map.
///
func StringMapAppend(
	cmap CStringMapT,
	key string,
	value string,
) (ret bool) {
	c_key := create_cef_string(key)
	c_value := create_cef_string(value)

	cRet := C.cef_string_map_append((C.cef_string_map_t)(cmap), c_key.p_cef_string_t, c_value.p_cef_string_t)

	ret = cRet == 1
	return ret
}

///
// Clear the string map.
///
func StringMapClear(
	cmap CStringMapT,
) {

	C.cef_string_map_clear((C.cef_string_map_t)(cmap))

}

///
// Free the string map.
///
func StringMapFree(
	cmap CStringMapT,
) {

	C.cef_string_map_free((C.cef_string_map_t)(cmap))

}

// cef_string_multimap.h, include/internal/cef_string_multimap.h:45:15,

///
// CEF string multimaps are a set of key/value string pairs.
// More than one value can be assigned to a single key.
///
type CStringMultimapT C.cef_string_multimap_t

///
// Allocate a new string multimap.
///
func StringMultimapAlloc() (ret CStringMultimapT) {

	cRet := C.cef_string_multimap_alloc()

	ret = (CStringMultimapT)(cRet)
	return ret
}

///
// Return the number of elements in the string multimap.
///
func StringMultimapSize(
	cmap CStringMultimapT,
) (ret int64) {

	cRet := C.cef_string_multimap_size((C.cef_string_multimap_t)(cmap))

	ret = (int64)(cRet)
	return ret
}

///
// Return the number of values with the specified key.
///
func StringMultimapFindCount(
	cmap CStringMultimapT,
	key string,
) (ret int64) {
	c_key := create_cef_string(key)

	cRet := C.cef_string_multimap_find_count((C.cef_string_multimap_t)(cmap), c_key.p_cef_string_t)

	ret = (int64)(cRet)
	return ret
}

///
// Return the value_index-th value with the specified key.
///
func StringMultimapEnumerate(
	cmap CStringMultimapT,
	key string,
	value_index int64,
) (ret bool, value string) {
	c_key := create_cef_string(key)
	tmpc_value := create_cef_string("")

	cRet := C.cef_string_multimap_enumerate((C.cef_string_multimap_t)(cmap), c_key.p_cef_string_t, (C.size_t)(value_index), tmpc_value.p_cef_string_t)

	value = string_from_cef_string(tmpc_value.p_cef_string_t)

	ret = cRet == 1
	return ret, value
}

///
// Return the key at the specified zero-based string multimap index.
///
func StringMultimapKey(
	cmap CStringMultimapT,
	index int64,
) (ret bool, key string) {
	tmpc_key := create_cef_string("")

	cRet := C.cef_string_multimap_key((C.cef_string_multimap_t)(cmap), (C.size_t)(index), tmpc_key.p_cef_string_t)

	key = string_from_cef_string(tmpc_key.p_cef_string_t)

	ret = cRet == 1
	return ret, key
}

///
// Return the value at the specified zero-based string multimap index.
///
func StringMultimapValue(
	cmap CStringMultimapT,
	index int64,
) (ret bool, value string) {
	tmpc_value := create_cef_string("")

	cRet := C.cef_string_multimap_value((C.cef_string_multimap_t)(cmap), (C.size_t)(index), tmpc_value.p_cef_string_t)

	value = string_from_cef_string(tmpc_value.p_cef_string_t)

	ret = cRet == 1
	return ret, value
}

///
// Append a new key/value pair at the end of the string multimap.
///
func StringMultimapAppend(
	cmap CStringMultimapT,
	key string,
	value string,
) (ret bool) {
	c_key := create_cef_string(key)
	c_value := create_cef_string(value)

	cRet := C.cef_string_multimap_append((C.cef_string_multimap_t)(cmap), c_key.p_cef_string_t, c_value.p_cef_string_t)

	ret = cRet == 1
	return ret
}

///
// Clear the string multimap.
///
func StringMultimapClear(
	cmap CStringMultimapT,
) {

	C.cef_string_multimap_clear((C.cef_string_multimap_t)(cmap))

}

///
// Free the string multimap.
///
func StringMultimapFree(
	cmap CStringMultimapT,
) {

	C.cef_string_multimap_free((C.cef_string_multimap_t)(cmap))

}

// cef_time.h, include/internal/cef_time.h:55:3,

///
// Time information. Values should always be in UTC.
///
type CTimeT C.cef_time_t

///
// Converts cef_time_t to/from time_t. Returns true (1) on success and false (0)
// on failure.
///
func TimeToTimet(
	cef_time *CTimeT,
) (ret bool, ctime time.Time) {
	var tmpc_ctime C.time_t

	cRet := C.cef_time_to_timet((*C.cef_time_t)(cef_time), &tmpc_ctime)

	ctime = time.Unix(int64(tmpc_ctime), 0)

	ret = cRet == 1
	return ret, ctime
}
func TimeFromTimet(
	ctime time.Time,
	cef_time *CTimeT,
) (ret bool) {
	c_ctime := ctime.Unix()

	cRet := C.cef_time_from_timet(C.time_t(c_ctime), (*C.cef_time_t)(cef_time))

	ret = cRet == 1
	return ret
}

///
// Converts cef_time_t to/from a double which is the number of seconds since
// epoch (Jan 1, 1970). Webkit uses this format to represent time. A value of 0
// means "not initialized". Returns true (1) on success and false (0) on
// failure.
///
func TimeToDoublet(
	cef_time *CTimeT,
	ctime *float64,
) (ret bool) {

	cRet := C.cef_time_to_doublet((*C.cef_time_t)(cef_time), (*C.double)(ctime))

	ret = cRet == 1
	return ret
}
func TimeFromDoublet(
	ctime float64,
	cef_time *CTimeT,
) (ret bool) {

	cRet := C.cef_time_from_doublet((C.double)(ctime), (*C.cef_time_t)(cef_time))

	ret = cRet == 1
	return ret
}

///
// Retrieve the current system time.
//
func TimeNow(
	cef_time *CTimeT,
) (ret bool) {

	cRet := C.cef_time_now((*C.cef_time_t)(cef_time))

	ret = cRet == 1
	return ret
}

///
// Retrieve the delta in milliseconds between two time values.
//
func TimeDelta(
	cef_time1 *CTimeT,
	cef_time2 *CTimeT,
	delta *int64,
) (ret bool) {

	cRet := C.cef_time_delta((*C.cef_time_t)(cef_time1), (*C.cef_time_t)(cef_time2), (*C.LONGLONG)(delta))

	ret = cRet == 1
	return ret
}

// cef_types.h, include/internal/cef_types.h:50:16,

// 32-bit ARGB color value, not premultiplied. The color components are always
// in a known order. Equivalent to the SkColor type.
type CColorT C.cef_color_t

///
// Log severity levels.
///
type CLogSeverityT C.cef_log_severity_t

const (

	///
	// Default logging (currently INFO logging).
	///
	LogseverityDefault CLogSeverityT = C.LOGSEVERITY_DEFAULT

	///
	// Verbose logging.
	///
	LogseverityVerbose CLogSeverityT = C.LOGSEVERITY_VERBOSE

	///
	// DEBUG logging.
	///
	LogseverityDebug CLogSeverityT = C.LOGSEVERITY_DEBUG

	///
	// INFO logging.
	///
	LogseverityInfo CLogSeverityT = C.LOGSEVERITY_INFO

	///
	// WARNING logging.
	///
	LogseverityWarning CLogSeverityT = C.LOGSEVERITY_WARNING

	///
	// ERROR logging.
	///
	LogseverityError CLogSeverityT = C.LOGSEVERITY_ERROR

	///
	// FATAL logging.
	///
	LogseverityFatal CLogSeverityT = C.LOGSEVERITY_FATAL

	///
	// Disable logging to file for all messages, and to stderr for messages with
	// severity less than FATAL.
	///
	LogseverityDisable CLogSeverityT = C.LOGSEVERITY_DISABLE
)

///
// Represents the state of a setting.
///
type CStateT C.cef_state_t

const (

	///
	// Use the default state for the setting.
	///
	StateDefault CStateT = C.STATE_DEFAULT

	///
	// Enable or allow the setting.
	///
	StateEnabled CStateT = C.STATE_ENABLED

	///
	// Disable or disallow the setting.
	///
	StateDisabled CStateT = C.STATE_DISABLED
)

///
// Initialization settings. Specify NULL or 0 to get the recommended default
// values. Many of these and other settings can also configured using command-
// line switches.
///
type CSettingsT C.cef_settings_t

func NewCSettingsT() *CSettingsT {
	s := &CSettingsT{}
	s.size = C.sizeof_cef_settings_t
	return s
}

func (st *CSettingsT) NoSandbox() bool {
	return st.no_sandbox != 0
}

func (st *CSettingsT) SetNoSandbox(v bool) {
	if v {
		st.no_sandbox = 1
	} else {
		st.no_sandbox = 0
	}
}

func (st *CSettingsT) BrowserSubprocessPath() string {
	return string_from_cef_string(&st.browser_subprocess_path)
}

func (st *CSettingsT) SetBrowserSubprocessPath(v string) {
	set_cef_string(&st.browser_subprocess_path, v)
}

func (st *CSettingsT) FrameworkDirPath() string {
	return string_from_cef_string(&st.framework_dir_path)
}

func (st *CSettingsT) SetFrameworkDirPath(v string) {
	set_cef_string(&st.framework_dir_path, v)
}

func (st *CSettingsT) MainBundlePath() string {
	return string_from_cef_string(&st.main_bundle_path)
}

func (st *CSettingsT) SetMainBundlePath(v string) {
	set_cef_string(&st.main_bundle_path, v)
}

func (st *CSettingsT) ChromeRuntime() int {
	return int(st.chrome_runtime)
}

func (st *CSettingsT) SetChromeRuntime(v int) {
	st.chrome_runtime = (C.int)(v)
}

func (st *CSettingsT) MultiThreadedMessageLoop() bool {
	return st.multi_threaded_message_loop != 0
}

func (st *CSettingsT) SetMultiThreadedMessageLoop(v bool) {
	if v {
		st.multi_threaded_message_loop = 1
	} else {
		st.multi_threaded_message_loop = 0
	}
}

func (st *CSettingsT) ExternalMessagePump() bool {
	return st.external_message_pump != 0
}

func (st *CSettingsT) SetExternalMessagePump(v bool) {
	if v {
		st.external_message_pump = 1
	} else {
		st.external_message_pump = 0
	}
}

func (st *CSettingsT) WindowlessRenderingEnabled() bool {
	return st.windowless_rendering_enabled != 0
}

func (st *CSettingsT) SetWindowlessRenderingEnabled(v bool) {
	if v {
		st.windowless_rendering_enabled = 1
	} else {
		st.windowless_rendering_enabled = 0
	}
}

func (st *CSettingsT) CommandLineArgsDisabled() bool {
	return st.command_line_args_disabled != 0
}

func (st *CSettingsT) SetCommandLineArgsDisabled(v bool) {
	if v {
		st.command_line_args_disabled = 1
	} else {
		st.command_line_args_disabled = 0
	}
}

func (st *CSettingsT) CachePath() string {
	return string_from_cef_string(&st.cache_path)
}

func (st *CSettingsT) SetCachePath(v string) {
	set_cef_string(&st.cache_path, v)
}

func (st *CSettingsT) RootCachePath() string {
	return string_from_cef_string(&st.root_cache_path)
}

func (st *CSettingsT) SetRootCachePath(v string) {
	set_cef_string(&st.root_cache_path, v)
}

func (st *CSettingsT) UserDataPath() string {
	return string_from_cef_string(&st.user_data_path)
}

func (st *CSettingsT) SetUserDataPath(v string) {
	set_cef_string(&st.user_data_path, v)
}

func (st *CSettingsT) PersistSessionCookies() bool {
	return st.persist_session_cookies != 0
}

func (st *CSettingsT) SetPersistSessionCookies(v bool) {
	if v {
		st.persist_session_cookies = 1
	} else {
		st.persist_session_cookies = 0
	}
}

func (st *CSettingsT) PersistUserPreferences() bool {
	return st.persist_user_preferences != 0
}

func (st *CSettingsT) SetPersistUserPreferences(v bool) {
	if v {
		st.persist_user_preferences = 1
	} else {
		st.persist_user_preferences = 0
	}
}

func (st *CSettingsT) UserAgent() string {
	return string_from_cef_string(&st.user_agent)
}

func (st *CSettingsT) SetUserAgent(v string) {
	set_cef_string(&st.user_agent, v)
}

func (st *CSettingsT) ProductVersion() string {
	return string_from_cef_string(&st.product_version)
}

func (st *CSettingsT) SetProductVersion(v string) {
	set_cef_string(&st.product_version, v)
}

func (st *CSettingsT) Locale() string {
	return string_from_cef_string(&st.locale)
}

func (st *CSettingsT) SetLocale(v string) {
	set_cef_string(&st.locale, v)
}

func (st *CSettingsT) LogFile() string {
	return string_from_cef_string(&st.log_file)
}

func (st *CSettingsT) SetLogFile(v string) {
	set_cef_string(&st.log_file, v)
}

func (st *CSettingsT) LogSeverity() CLogSeverityT {
	return CLogSeverityT(st.log_severity)
}

func (st *CSettingsT) SetLogSeverity(v CLogSeverityT) {
	st.log_severity = (C.cef_log_severity_t)(v)
}

func (st *CSettingsT) JavascriptFlags() string {
	return string_from_cef_string(&st.javascript_flags)
}

func (st *CSettingsT) SetJavascriptFlags(v string) {
	set_cef_string(&st.javascript_flags, v)
}

func (st *CSettingsT) ResourcesDirPath() string {
	return string_from_cef_string(&st.resources_dir_path)
}

func (st *CSettingsT) SetResourcesDirPath(v string) {
	set_cef_string(&st.resources_dir_path, v)
}

func (st *CSettingsT) LocalesDirPath() string {
	return string_from_cef_string(&st.locales_dir_path)
}

func (st *CSettingsT) SetLocalesDirPath(v string) {
	set_cef_string(&st.locales_dir_path, v)
}

func (st *CSettingsT) PackLoadingDisabled() bool {
	return st.pack_loading_disabled != 0
}

func (st *CSettingsT) SetPackLoadingDisabled(v bool) {
	if v {
		st.pack_loading_disabled = 1
	} else {
		st.pack_loading_disabled = 0
	}
}

func (st *CSettingsT) RemoteDebuggingPort() int {
	return int(st.remote_debugging_port)
}

func (st *CSettingsT) SetRemoteDebuggingPort(v int) {
	st.remote_debugging_port = (C.int)(v)
}

func (st *CSettingsT) UncaughtExceptionStackSize() int {
	return int(st.uncaught_exception_stack_size)
}

func (st *CSettingsT) SetUncaughtExceptionStackSize(v int) {
	st.uncaught_exception_stack_size = (C.int)(v)
}

func (st *CSettingsT) IgnoreCertificateErrors() bool {
	return st.ignore_certificate_errors != 0
}

func (st *CSettingsT) SetIgnoreCertificateErrors(v bool) {
	if v {
		st.ignore_certificate_errors = 1
	} else {
		st.ignore_certificate_errors = 0
	}
}

func (st *CSettingsT) BackgroundColor() CColorT {
	return CColorT(st.background_color)
}

func (st *CSettingsT) SetBackgroundColor(v CColorT) {
	st.background_color = (C.cef_color_t)(v)
}

func (st *CSettingsT) AcceptLanguageList() string {
	return string_from_cef_string(&st.accept_language_list)
}

func (st *CSettingsT) SetAcceptLanguageList(v string) {
	set_cef_string(&st.accept_language_list, v)
}

func (st *CSettingsT) ApplicationClientIdForFileScanning() string {
	return string_from_cef_string(&st.application_client_id_for_file_scanning)
}

func (st *CSettingsT) SetApplicationClientIdForFileScanning(v string) {
	set_cef_string(&st.application_client_id_for_file_scanning, v)
}

///
// Request context initialization settings. Specify NULL or 0 to get the
// recommended default values.
///
type CRequestContextSettingsT C.cef_request_context_settings_t

func NewCRequestContextSettingsT() *CRequestContextSettingsT {
	s := &CRequestContextSettingsT{}
	s.size = C.sizeof_cef_request_context_settings_t
	return s
}

func (st *CRequestContextSettingsT) CachePath() string {
	return string_from_cef_string(&st.cache_path)
}

func (st *CRequestContextSettingsT) SetCachePath(v string) {
	set_cef_string(&st.cache_path, v)
}

func (st *CRequestContextSettingsT) PersistSessionCookies() bool {
	return st.persist_session_cookies != 0
}

func (st *CRequestContextSettingsT) SetPersistSessionCookies(v bool) {
	if v {
		st.persist_session_cookies = 1
	} else {
		st.persist_session_cookies = 0
	}
}

func (st *CRequestContextSettingsT) PersistUserPreferences() bool {
	return st.persist_user_preferences != 0
}

func (st *CRequestContextSettingsT) SetPersistUserPreferences(v bool) {
	if v {
		st.persist_user_preferences = 1
	} else {
		st.persist_user_preferences = 0
	}
}

func (st *CRequestContextSettingsT) IgnoreCertificateErrors() bool {
	return st.ignore_certificate_errors != 0
}

func (st *CRequestContextSettingsT) SetIgnoreCertificateErrors(v bool) {
	if v {
		st.ignore_certificate_errors = 1
	} else {
		st.ignore_certificate_errors = 0
	}
}

func (st *CRequestContextSettingsT) AcceptLanguageList() string {
	return string_from_cef_string(&st.accept_language_list)
}

func (st *CRequestContextSettingsT) SetAcceptLanguageList(v string) {
	set_cef_string(&st.accept_language_list, v)
}

///
// Browser initialization settings. Specify NULL or 0 to get the recommended
// default values. The consequences of using custom values may not be well
// tested. Many of these and other settings can also configured using command-
// line switches.
///
type CBrowserSettingsT C.cef_browser_settings_t

func NewCBrowserSettingsT() *CBrowserSettingsT {
	s := &CBrowserSettingsT{}
	s.size = C.sizeof_cef_browser_settings_t
	return s
}

func (st *CBrowserSettingsT) WindowlessFrameRate() int {
	return int(st.windowless_frame_rate)
}

func (st *CBrowserSettingsT) SetWindowlessFrameRate(v int) {
	st.windowless_frame_rate = (C.int)(v)
}

func (st *CBrowserSettingsT) StandardFontFamily() string {
	return string_from_cef_string(&st.standard_font_family)
}

func (st *CBrowserSettingsT) SetStandardFontFamily(v string) {
	set_cef_string(&st.standard_font_family, v)
}

func (st *CBrowserSettingsT) FixedFontFamily() string {
	return string_from_cef_string(&st.fixed_font_family)
}

func (st *CBrowserSettingsT) SetFixedFontFamily(v string) {
	set_cef_string(&st.fixed_font_family, v)
}

func (st *CBrowserSettingsT) SerifFontFamily() string {
	return string_from_cef_string(&st.serif_font_family)
}

func (st *CBrowserSettingsT) SetSerifFontFamily(v string) {
	set_cef_string(&st.serif_font_family, v)
}

func (st *CBrowserSettingsT) SansSerifFontFamily() string {
	return string_from_cef_string(&st.sans_serif_font_family)
}

func (st *CBrowserSettingsT) SetSansSerifFontFamily(v string) {
	set_cef_string(&st.sans_serif_font_family, v)
}

func (st *CBrowserSettingsT) CursiveFontFamily() string {
	return string_from_cef_string(&st.cursive_font_family)
}

func (st *CBrowserSettingsT) SetCursiveFontFamily(v string) {
	set_cef_string(&st.cursive_font_family, v)
}

func (st *CBrowserSettingsT) FantasyFontFamily() string {
	return string_from_cef_string(&st.fantasy_font_family)
}

func (st *CBrowserSettingsT) SetFantasyFontFamily(v string) {
	set_cef_string(&st.fantasy_font_family, v)
}

func (st *CBrowserSettingsT) DefaultFontSize() int {
	return int(st.default_font_size)
}

func (st *CBrowserSettingsT) SetDefaultFontSize(v int) {
	st.default_font_size = (C.int)(v)
}

func (st *CBrowserSettingsT) DefaultFixedFontSize() int {
	return int(st.default_fixed_font_size)
}

func (st *CBrowserSettingsT) SetDefaultFixedFontSize(v int) {
	st.default_fixed_font_size = (C.int)(v)
}

func (st *CBrowserSettingsT) MinimumFontSize() int {
	return int(st.minimum_font_size)
}

func (st *CBrowserSettingsT) SetMinimumFontSize(v int) {
	st.minimum_font_size = (C.int)(v)
}

func (st *CBrowserSettingsT) MinimumLogicalFontSize() int {
	return int(st.minimum_logical_font_size)
}

func (st *CBrowserSettingsT) SetMinimumLogicalFontSize(v int) {
	st.minimum_logical_font_size = (C.int)(v)
}

func (st *CBrowserSettingsT) DefaultEncoding() string {
	return string_from_cef_string(&st.default_encoding)
}

func (st *CBrowserSettingsT) SetDefaultEncoding(v string) {
	set_cef_string(&st.default_encoding, v)
}

func (st *CBrowserSettingsT) RemoteFonts() CStateT {
	return CStateT(st.remote_fonts)
}

func (st *CBrowserSettingsT) SetRemoteFonts(v CStateT) {
	st.remote_fonts = (C.cef_state_t)(v)
}

func (st *CBrowserSettingsT) Javascript() CStateT {
	return CStateT(st.javascript)
}

func (st *CBrowserSettingsT) SetJavascript(v CStateT) {
	st.javascript = (C.cef_state_t)(v)
}

func (st *CBrowserSettingsT) JavascriptCloseWindows() CStateT {
	return CStateT(st.javascript_close_windows)
}

func (st *CBrowserSettingsT) SetJavascriptCloseWindows(v CStateT) {
	st.javascript_close_windows = (C.cef_state_t)(v)
}

func (st *CBrowserSettingsT) JavascriptAccessClipboard() CStateT {
	return CStateT(st.javascript_access_clipboard)
}

func (st *CBrowserSettingsT) SetJavascriptAccessClipboard(v CStateT) {
	st.javascript_access_clipboard = (C.cef_state_t)(v)
}

func (st *CBrowserSettingsT) JavascriptDomPaste() CStateT {
	return CStateT(st.javascript_dom_paste)
}

func (st *CBrowserSettingsT) SetJavascriptDomPaste(v CStateT) {
	st.javascript_dom_paste = (C.cef_state_t)(v)
}

func (st *CBrowserSettingsT) Plugins() CStateT {
	return CStateT(st.plugins)
}

func (st *CBrowserSettingsT) SetPlugins(v CStateT) {
	st.plugins = (C.cef_state_t)(v)
}

func (st *CBrowserSettingsT) UniversalAccessFromFileUrls() CStateT {
	return CStateT(st.universal_access_from_file_urls)
}

func (st *CBrowserSettingsT) SetUniversalAccessFromFileUrls(v CStateT) {
	st.universal_access_from_file_urls = (C.cef_state_t)(v)
}

func (st *CBrowserSettingsT) FileAccessFromFileUrls() CStateT {
	return CStateT(st.file_access_from_file_urls)
}

func (st *CBrowserSettingsT) SetFileAccessFromFileUrls(v CStateT) {
	st.file_access_from_file_urls = (C.cef_state_t)(v)
}

func (st *CBrowserSettingsT) WebSecurity() CStateT {
	return CStateT(st.web_security)
}

func (st *CBrowserSettingsT) SetWebSecurity(v CStateT) {
	st.web_security = (C.cef_state_t)(v)
}

func (st *CBrowserSettingsT) ImageLoading() CStateT {
	return CStateT(st.image_loading)
}

func (st *CBrowserSettingsT) SetImageLoading(v CStateT) {
	st.image_loading = (C.cef_state_t)(v)
}

func (st *CBrowserSettingsT) ImageShrinkStandaloneToFit() CStateT {
	return CStateT(st.image_shrink_standalone_to_fit)
}

func (st *CBrowserSettingsT) SetImageShrinkStandaloneToFit(v CStateT) {
	st.image_shrink_standalone_to_fit = (C.cef_state_t)(v)
}

func (st *CBrowserSettingsT) TextAreaResize() CStateT {
	return CStateT(st.text_area_resize)
}

func (st *CBrowserSettingsT) SetTextAreaResize(v CStateT) {
	st.text_area_resize = (C.cef_state_t)(v)
}

func (st *CBrowserSettingsT) TabToLinks() CStateT {
	return CStateT(st.tab_to_links)
}

func (st *CBrowserSettingsT) SetTabToLinks(v CStateT) {
	st.tab_to_links = (C.cef_state_t)(v)
}

func (st *CBrowserSettingsT) LocalStorage() CStateT {
	return CStateT(st.local_storage)
}

func (st *CBrowserSettingsT) SetLocalStorage(v CStateT) {
	st.local_storage = (C.cef_state_t)(v)
}

func (st *CBrowserSettingsT) Databases() CStateT {
	return CStateT(st.databases)
}

func (st *CBrowserSettingsT) SetDatabases(v CStateT) {
	st.databases = (C.cef_state_t)(v)
}

func (st *CBrowserSettingsT) ApplicationCache() CStateT {
	return CStateT(st.application_cache)
}

func (st *CBrowserSettingsT) SetApplicationCache(v CStateT) {
	st.application_cache = (C.cef_state_t)(v)
}

func (st *CBrowserSettingsT) Webgl() CStateT {
	return CStateT(st.webgl)
}

func (st *CBrowserSettingsT) SetWebgl(v CStateT) {
	st.webgl = (C.cef_state_t)(v)
}

func (st *CBrowserSettingsT) BackgroundColor() CColorT {
	return CColorT(st.background_color)
}

func (st *CBrowserSettingsT) SetBackgroundColor(v CColorT) {
	st.background_color = (C.cef_color_t)(v)
}

func (st *CBrowserSettingsT) AcceptLanguageList() string {
	return string_from_cef_string(&st.accept_language_list)
}

func (st *CBrowserSettingsT) SetAcceptLanguageList(v string) {
	set_cef_string(&st.accept_language_list, v)
}

///
// Return value types.
///
type CReturnValueT C.cef_return_value_t

const (

	///
	// Cancel immediately.
	///
	RvCancel CReturnValueT = C.RV_CANCEL

	///
	// Continue immediately.
	///
	RvContinue CReturnValueT = C.RV_CONTINUE

	///
	// Continue asynchronously (usually via a callback).
	///
	RvContinueAsync CReturnValueT = C.RV_CONTINUE_ASYNC
)

///
// URL component parts.
///
type CUrlpartsT C.cef_urlparts_t

func NewCUrlpartsT() *CUrlpartsT {
	s := &CUrlpartsT{}
	return s
}

func (st *CUrlpartsT) Spec() string {
	return string_from_cef_string(&st.spec)
}

func (st *CUrlpartsT) SetSpec(v string) {
	set_cef_string(&st.spec, v)
}

func (st *CUrlpartsT) Scheme() string {
	return string_from_cef_string(&st.scheme)
}

func (st *CUrlpartsT) SetScheme(v string) {
	set_cef_string(&st.scheme, v)
}

func (st *CUrlpartsT) Username() string {
	return string_from_cef_string(&st.username)
}

func (st *CUrlpartsT) SetUsername(v string) {
	set_cef_string(&st.username, v)
}

func (st *CUrlpartsT) Password() string {
	return string_from_cef_string(&st.password)
}

func (st *CUrlpartsT) SetPassword(v string) {
	set_cef_string(&st.password, v)
}

func (st *CUrlpartsT) Host() string {
	return string_from_cef_string(&st.host)
}

func (st *CUrlpartsT) SetHost(v string) {
	set_cef_string(&st.host, v)
}

func (st *CUrlpartsT) Port() string {
	return string_from_cef_string(&st.port)
}

func (st *CUrlpartsT) SetPort(v string) {
	set_cef_string(&st.port, v)
}

func (st *CUrlpartsT) Origin() string {
	return string_from_cef_string(&st.origin)
}

func (st *CUrlpartsT) SetOrigin(v string) {
	set_cef_string(&st.origin, v)
}

func (st *CUrlpartsT) Path() string {
	return string_from_cef_string(&st.path)
}

func (st *CUrlpartsT) SetPath(v string) {
	set_cef_string(&st.path, v)
}

func (st *CUrlpartsT) Query() string {
	return string_from_cef_string(&st.query)
}

func (st *CUrlpartsT) SetQuery(v string) {
	set_cef_string(&st.query, v)
}

func (st *CUrlpartsT) Fragment() string {
	return string_from_cef_string(&st.fragment)
}

func (st *CUrlpartsT) SetFragment(v string) {
	set_cef_string(&st.fragment, v)
}

///
// Cookie priority values.
///
type CCookiePriorityT C.cef_cookie_priority_t

const (
	CefCookiePriorityLow    CCookiePriorityT = C.CEF_COOKIE_PRIORITY_LOW
	CefCookiePriorityMedium CCookiePriorityT = C.CEF_COOKIE_PRIORITY_MEDIUM
	CefCookiePriorityHigh   CCookiePriorityT = C.CEF_COOKIE_PRIORITY_HIGH
)

///
// Cookie same site values.
///
type CCookieSameSiteT C.cef_cookie_same_site_t

const (
	CefCookieSameSiteUnspecified   CCookieSameSiteT = C.CEF_COOKIE_SAME_SITE_UNSPECIFIED
	CefCookieSameSiteNoRestriction CCookieSameSiteT = C.CEF_COOKIE_SAME_SITE_NO_RESTRICTION
	CefCookieSameSiteLaxMode       CCookieSameSiteT = C.CEF_COOKIE_SAME_SITE_LAX_MODE
	CefCookieSameSiteStrictMode    CCookieSameSiteT = C.CEF_COOKIE_SAME_SITE_STRICT_MODE
)

///
// Cookie information.
///
type CCookieT C.cef_cookie_t

func NewCCookieT() *CCookieT {
	s := &CCookieT{}
	return s
}

func (st *CCookieT) Name() string {
	return string_from_cef_string(&st.name)
}

func (st *CCookieT) SetName(v string) {
	set_cef_string(&st.name, v)
}

func (st *CCookieT) Value() string {
	return string_from_cef_string(&st.value)
}

func (st *CCookieT) SetValue(v string) {
	set_cef_string(&st.value, v)
}

func (st *CCookieT) Domain() string {
	return string_from_cef_string(&st.domain)
}

func (st *CCookieT) SetDomain(v string) {
	set_cef_string(&st.domain, v)
}

func (st *CCookieT) Path() string {
	return string_from_cef_string(&st.path)
}

func (st *CCookieT) SetPath(v string) {
	set_cef_string(&st.path, v)
}

func (st *CCookieT) Secure() int {
	return int(st.secure)
}

func (st *CCookieT) SetSecure(v int) {
	st.secure = (C.int)(v)
}

func (st *CCookieT) Httponly() int {
	return int(st.httponly)
}

func (st *CCookieT) SetHttponly(v int) {
	st.httponly = (C.int)(v)
}

func (st *CCookieT) Creation() CTimeT {
	return CTimeT(st.creation)
}

func (st *CCookieT) SetCreation(v CTimeT) {
	st.creation = (C.cef_time_t)(v)
}

func (st *CCookieT) LastAccess() CTimeT {
	return CTimeT(st.last_access)
}

func (st *CCookieT) SetLastAccess(v CTimeT) {
	st.last_access = (C.cef_time_t)(v)
}

func (st *CCookieT) HasExpires() int {
	return int(st.has_expires)
}

func (st *CCookieT) SetHasExpires(v int) {
	st.has_expires = (C.int)(v)
}

func (st *CCookieT) Expires() CTimeT {
	return CTimeT(st.expires)
}

func (st *CCookieT) SetExpires(v CTimeT) {
	st.expires = (C.cef_time_t)(v)
}

func (st *CCookieT) SameSite() CCookieSameSiteT {
	return CCookieSameSiteT(st.same_site)
}

func (st *CCookieT) SetSameSite(v CCookieSameSiteT) {
	st.same_site = (C.cef_cookie_same_site_t)(v)
}

func (st *CCookieT) Priority() CCookiePriorityT {
	return CCookiePriorityT(st.priority)
}

func (st *CCookieT) SetPriority(v CCookiePriorityT) {
	st.priority = (C.cef_cookie_priority_t)(v)
}

///
// Process termination status values.
///
type CTerminationStatusT C.cef_termination_status_t

const (

	///
	// Non-zero exit status.
	///
	TsAbnormalTermination CTerminationStatusT = C.TS_ABNORMAL_TERMINATION

	///
	// SIGKILL or task manager kill.
	///
	TsProcessWasKilled CTerminationStatusT = C.TS_PROCESS_WAS_KILLED

	///
	// Segmentation fault.
	///
	TsProcessCrashed CTerminationStatusT = C.TS_PROCESS_CRASHED

	///
	// Out of memory. Some platforms may use TS_PROCESS_CRASHED instead.
	///
	TsProcessOom CTerminationStatusT = C.TS_PROCESS_OOM
)

///
// Path key values.
///
type CPathKeyT C.cef_path_key_t

const (

	///
	// Current directory.
	///
	PkDirCurrent CPathKeyT = C.PK_DIR_CURRENT

	///
	// Directory containing PK_FILE_EXE.
	///
	PkDirExe CPathKeyT = C.PK_DIR_EXE

	///
	// Directory containing PK_FILE_MODULE.
	///
	PkDirModule CPathKeyT = C.PK_DIR_MODULE

	///
	// Temporary directory.
	///
	PkDirTemp CPathKeyT = C.PK_DIR_TEMP

	///
	// Path and filename of the current executable.
	///
	PkFileExe CPathKeyT = C.PK_FILE_EXE

	///
	// Path and filename of the module containing the CEF code (usually the libcef
	// module).
	///
	PkFileModule CPathKeyT = C.PK_FILE_MODULE

	///
	// "Local Settings\Application Data" directory under the user profile
	// directory on Windows.
	///
	PkLocalAppData CPathKeyT = C.PK_LOCAL_APP_DATA

	///
	// "Application Data" directory under the user profile directory on Windows
	// and "~/Library/Application Support" directory on Mac OS X.
	///
	PkUserData CPathKeyT = C.PK_USER_DATA

	///
	// Directory containing application resources. Can be configured via
	// CefSettings.resources_dir_path.
	///
	PkDirResources CPathKeyT = C.PK_DIR_RESOURCES
)

///
// Storage types.
///
type CStorageTypeT C.cef_storage_type_t

const (
	StLocalstorage   CStorageTypeT = C.ST_LOCALSTORAGE
	StSessionstorage CStorageTypeT = C.ST_SESSIONSTORAGE
)

///
// Supported error code values.
///
type CErrorcodeT C.cef_errorcode_t

const (

	// No error.
	ErrNone CErrorcodeT = C.ERR_NONE

	// Copyright (c) 2014 Marshall A. Greenblatt. All rights reserved.
	//
	// Redistribution and use in source and binary forms, with or without
	// modification, are permitted provided that the following conditions are
	// met:
	//
	//    * Redistributions of source code must retain the above copyright
	// notice, this list of conditions and the following disclaimer.
	//    * Redistributions in binary form must reproduce the above
	// copyright notice, this list of conditions and the following disclaimer
	// in the documentation and/or other materials provided with the
	// distribution.
	//    * Neither the name of Google Inc. nor the name Chromium Embedded
	// Framework nor the names of its contributors may be used to endorse
	// or promote products derived from this software without specific prior
	// written permission.
	//
	// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
	// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
	// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
	// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
	// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	ErrIoPending       CErrorcodeT = C.ERR_IO_PENDING
	ErrFailed          CErrorcodeT = C.ERR_FAILED
	ErrAborted         CErrorcodeT = C.ERR_ABORTED
	ErrInvalidArgument CErrorcodeT = C.ERR_INVALID_ARGUMENT
	ErrInvalidHandle   CErrorcodeT = C.ERR_INVALID_HANDLE
	ErrFileNotFound    CErrorcodeT = C.ERR_FILE_NOT_FOUND
	ErrTimedOut        CErrorcodeT = C.ERR_TIMED_OUT

	// 32-bit ARGB color value, not premultiplied. The color components are always
	// in a known order. Equivalent to the SkColor type.
	ErrFileTooBig CErrorcodeT = C.ERR_FILE_TOO_BIG
	ErrUnexpected CErrorcodeT = C.ERR_UNEXPECTED

	// Return the green byte from a cef_color_t value.
	ErrAccessDenied          CErrorcodeT = C.ERR_ACCESS_DENIED
	ErrNotImplemented        CErrorcodeT = C.ERR_NOT_IMPLEMENTED
	ErrInsufficientResources CErrorcodeT = C.ERR_INSUFFICIENT_RESOURCES
	ErrOutOfMemory           CErrorcodeT = C.ERR_OUT_OF_MEMORY
	ErrUploadFileChanged     CErrorcodeT = C.ERR_UPLOAD_FILE_CHANGED
	ErrSocketNotConnected    CErrorcodeT = C.ERR_SOCKET_NOT_CONNECTED

	// Return the high int32 value from an int64 value.
	ErrFileExists        CErrorcodeT = C.ERR_FILE_EXISTS
	ErrFilePathTooLong   CErrorcodeT = C.ERR_FILE_PATH_TOO_LONG
	ErrFileNoSpace       CErrorcodeT = C.ERR_FILE_NO_SPACE
	ErrFileVirusInfected CErrorcodeT = C.ERR_FILE_VIRUS_INFECTED
	ErrBlockedByClient   CErrorcodeT = C.ERR_BLOCKED_BY_CLIENT
	ErrNetworkChanged    CErrorcodeT = C.ERR_NETWORK_CHANGED

	///
	// Verbose logging.
	///
	ErrBlockedByAdministrator         CErrorcodeT = C.ERR_BLOCKED_BY_ADMINISTRATOR
	ErrSocketIsConnected              CErrorcodeT = C.ERR_SOCKET_IS_CONNECTED
	ErrBlockedEnrollmentCheckPending  CErrorcodeT = C.ERR_BLOCKED_ENROLLMENT_CHECK_PENDING
	ErrUploadStreamRewindNotSupported CErrorcodeT = C.ERR_UPLOAD_STREAM_REWIND_NOT_SUPPORTED
	ErrContextShutDown                CErrorcodeT = C.ERR_CONTEXT_SHUT_DOWN
	ErrBlockedByResponse              CErrorcodeT = C.ERR_BLOCKED_BY_RESPONSE
	ErrCleartextNotPermitted          CErrorcodeT = C.ERR_CLEARTEXT_NOT_PERMITTED
	ErrBlockedByCsp                   CErrorcodeT = C.ERR_BLOCKED_BY_CSP
	ErrH2OrQuicRequired               CErrorcodeT = C.ERR_H2_OR_QUIC_REQUIRED
	ErrInsecurePrivateNetworkRequest  CErrorcodeT = C.ERR_INSECURE_PRIVATE_NETWORK_REQUEST

	///
	// Use the default state for the setting.
	///
	ErrConnectionClosed  CErrorcodeT = C.ERR_CONNECTION_CLOSED
	ErrConnectionReset   CErrorcodeT = C.ERR_CONNECTION_RESET
	ErrConnectionRefused CErrorcodeT = C.ERR_CONNECTION_REFUSED

	///
	// Disable or disallow the setting.
	///
	ErrConnectionAborted    CErrorcodeT = C.ERR_CONNECTION_ABORTED
	ErrConnectionFailed     CErrorcodeT = C.ERR_CONNECTION_FAILED
	ErrNameNotResolved      CErrorcodeT = C.ERR_NAME_NOT_RESOLVED
	ErrInternetDisconnected CErrorcodeT = C.ERR_INTERNET_DISCONNECTED

	///
	// Size of this structure.
	///
	ErrSslProtocolError           CErrorcodeT = C.ERR_SSL_PROTOCOL_ERROR
	ErrAddressInvalid             CErrorcodeT = C.ERR_ADDRESS_INVALID
	ErrAddressUnreachable         CErrorcodeT = C.ERR_ADDRESS_UNREACHABLE
	ErrSslClientAuthCertNeeded    CErrorcodeT = C.ERR_SSL_CLIENT_AUTH_CERT_NEEDED
	ErrTunnelConnectionFailed     CErrorcodeT = C.ERR_TUNNEL_CONNECTION_FAILED
	ErrNoSslVersionsEnabled       CErrorcodeT = C.ERR_NO_SSL_VERSIONS_ENABLED
	ErrSslVersionOrCipherMismatch CErrorcodeT = C.ERR_SSL_VERSION_OR_CIPHER_MISMATCH
	ErrSslRenegotiationRequested  CErrorcodeT = C.ERR_SSL_RENEGOTIATION_REQUESTED
	ErrProxyAuthUnsupported       CErrorcodeT = C.ERR_PROXY_AUTH_UNSUPPORTED

	///
	// The path to the main bundle on macOS. If this value is empty then it
	// defaults to the top-level app bundle. If this value is non-empty then it
	// must be an absolute path. Also configurable using the "main-bundle-path"
	// command-line switch.
	///
	ErrCertErrorInSslRenegotiation    CErrorcodeT = C.ERR_CERT_ERROR_IN_SSL_RENEGOTIATION
	ErrBadSslClientAuthCert           CErrorcodeT = C.ERR_BAD_SSL_CLIENT_AUTH_CERT
	ErrConnectionTimedOut             CErrorcodeT = C.ERR_CONNECTION_TIMED_OUT
	ErrHostResolverQueueTooLarge      CErrorcodeT = C.ERR_HOST_RESOLVER_QUEUE_TOO_LARGE
	ErrSocksConnectionFailed          CErrorcodeT = C.ERR_SOCKS_CONNECTION_FAILED
	ErrSocksConnectionHostUnreachable CErrorcodeT = C.ERR_SOCKS_CONNECTION_HOST_UNREACHABLE
	ErrAlpnNegotiationFailed          CErrorcodeT = C.ERR_ALPN_NEGOTIATION_FAILED
	ErrSslNoRenegotiation             CErrorcodeT = C.ERR_SSL_NO_RENEGOTIATION

	///
	// Set to true (1) to control browser process main (UI) thread message pump
	// scheduling via the CefBrowserProcessHandler::OnScheduleMessagePumpWork()
	// callback. This option is recommended for use in combination with the
	// CefDoMessageLoopWork() function in cases where the CEF message loop must be
	// integrated into an existing application message loop (see additional
	// comments and warnings on CefDoMessageLoopWork). Enabling this option is not
	// recommended for most users; leave this option disabled and use either the
	// CefRunMessageLoop() function or multi_threaded_message_loop if possible.
	///
	ErrWinsockUnexpectedWrittenBytes       CErrorcodeT = C.ERR_WINSOCK_UNEXPECTED_WRITTEN_BYTES
	ErrSslDecompressionFailureAlert        CErrorcodeT = C.ERR_SSL_DECOMPRESSION_FAILURE_ALERT
	ErrSslBadRecordMacAlert                CErrorcodeT = C.ERR_SSL_BAD_RECORD_MAC_ALERT
	ErrProxyAuthRequested                  CErrorcodeT = C.ERR_PROXY_AUTH_REQUESTED
	ErrProxyConnectionFailed               CErrorcodeT = C.ERR_PROXY_CONNECTION_FAILED
	ErrMandatoryProxyConfigurationFailed   CErrorcodeT = C.ERR_MANDATORY_PROXY_CONFIGURATION_FAILED
	ErrPreconnectMaxSocketLimit            CErrorcodeT = C.ERR_PRECONNECT_MAX_SOCKET_LIMIT
	ErrSslClientAuthPrivateKeyAccessDenied CErrorcodeT = C.ERR_SSL_CLIENT_AUTH_PRIVATE_KEY_ACCESS_DENIED
	ErrSslClientAuthCertNoPrivateKey       CErrorcodeT = C.ERR_SSL_CLIENT_AUTH_CERT_NO_PRIVATE_KEY
	ErrProxyCertificateInvalid             CErrorcodeT = C.ERR_PROXY_CERTIFICATE_INVALID
	ErrNameResolutionFailed                CErrorcodeT = C.ERR_NAME_RESOLUTION_FAILED
	ErrNetworkAccessDenied                 CErrorcodeT = C.ERR_NETWORK_ACCESS_DENIED
	ErrTemporarilyThrottled                CErrorcodeT = C.ERR_TEMPORARILY_THROTTLED
	ErrHttpsProxyTunnelResponseRedirect    CErrorcodeT = C.ERR_HTTPS_PROXY_TUNNEL_RESPONSE_REDIRECT
	ErrSslClientAuthSignatureFailed        CErrorcodeT = C.ERR_SSL_CLIENT_AUTH_SIGNATURE_FAILED

	///
	// To persist user preferences as a JSON file in the cache path directory set
	// this value to true (1). A |cache_path| value must also be specified
	// to enable this feature. Also configurable using the
	// "persist-user-preferences" command-line switch. Can be overridden for
	// individual CefRequestContext instances via the
	// CefRequestContextSettings.persist_user_preferences value.
	///
	ErrMsgTooBig                CErrorcodeT = C.ERR_MSG_TOO_BIG
	ErrWsProtocolError          CErrorcodeT = C.ERR_WS_PROTOCOL_ERROR
	ErrAddressInUse             CErrorcodeT = C.ERR_ADDRESS_IN_USE
	ErrSslHandshakeNotCompleted CErrorcodeT = C.ERR_SSL_HANDSHAKE_NOT_COMPLETED
	ErrSslBadPeerPublicKey      CErrorcodeT = C.ERR_SSL_BAD_PEER_PUBLIC_KEY

	///
	// The locale string that will be passed to WebKit. If empty the default
	// locale of "en-US" will be used. This value is ignored on Linux where locale
	// is determined using environment variable parsing with the precedence order:
	// LANGUAGE, LC_ALL, LC_MESSAGES and LANG. Also configurable using the "lang"
	// command-line switch.
	///
	ErrSslPinnedKeyNotInCertChain    CErrorcodeT = C.ERR_SSL_PINNED_KEY_NOT_IN_CERT_CHAIN
	ErrClientAuthCertTypeUnsupported CErrorcodeT = C.ERR_CLIENT_AUTH_CERT_TYPE_UNSUPPORTED

	///
	// The directory and file name to use for the debug log. If empty a default
	// log file name and location will be used. On Windows and Linux a "debug.log"
	// file will be written in the main executable directory. On Mac OS X a
	// "~/Library/Logs/<app name>_debug.log" file will be written where <app name>
	// is the name of the main app executable. Also configurable using the
	// "log-file" command-line switch.
	///
	ErrSslDecryptErrorAlert    CErrorcodeT = C.ERR_SSL_DECRYPT_ERROR_ALERT
	ErrWsThrottleQueueTooLarge CErrorcodeT = C.ERR_WS_THROTTLE_QUEUE_TOO_LARGE

	///
	// The log severity. Only messages of this severity level or higher will be
	// logged. When set to DISABLE no messages will be written to the log file,
	// but FATAL messages will still be output to stderr. Also configurable using
	// the "log-severity" command-line switch with a value of "verbose", "info",
	// "warning", "error", "fatal" or "disable".
	///
	ErrSslServerCertChanged CErrorcodeT = C.ERR_SSL_SERVER_CERT_CHANGED

	///
	// Custom flags that will be used when initializing the V8 JavaScript engine.
	// The consequences of using custom flags may not be well tested. Also
	// configurable using the "js-flags" command-line switch.
	///
	ErrSslUnrecognizedNameAlert            CErrorcodeT = C.ERR_SSL_UNRECOGNIZED_NAME_ALERT
	ErrSocketSetReceiveBufferSizeError     CErrorcodeT = C.ERR_SOCKET_SET_RECEIVE_BUFFER_SIZE_ERROR
	ErrSocketSetSendBufferSizeError        CErrorcodeT = C.ERR_SOCKET_SET_SEND_BUFFER_SIZE_ERROR
	ErrSocketReceiveBufferSizeUnchangeable CErrorcodeT = C.ERR_SOCKET_RECEIVE_BUFFER_SIZE_UNCHANGEABLE
	ErrSocketSendBufferSizeUnchangeable    CErrorcodeT = C.ERR_SOCKET_SEND_BUFFER_SIZE_UNCHANGEABLE
	ErrSslClientAuthCertBadFormat          CErrorcodeT = C.ERR_SSL_CLIENT_AUTH_CERT_BAD_FORMAT
	ErrIcannNameCollision                  CErrorcodeT = C.ERR_ICANN_NAME_COLLISION
	ErrSslServerCertBadFormat              CErrorcodeT = C.ERR_SSL_SERVER_CERT_BAD_FORMAT
	ErrCtSthParsingFailed                  CErrorcodeT = C.ERR_CT_STH_PARSING_FAILED
	ErrCtSthIncomplete                     CErrorcodeT = C.ERR_CT_STH_INCOMPLETE
	ErrUnableToReuseConnectionForProxyAuth CErrorcodeT = C.ERR_UNABLE_TO_REUSE_CONNECTION_FOR_PROXY_AUTH
	ErrCtConsistencyProofParsingFailed     CErrorcodeT = C.ERR_CT_CONSISTENCY_PROOF_PARSING_FAILED
	ErrSslObsoleteCipher                   CErrorcodeT = C.ERR_SSL_OBSOLETE_CIPHER

	///
	// Set to true (1) to ignore errors related to invalid SSL certificates.
	// Enabling this setting can lead to potential security vulnerabilities like
	// "man in the middle" attacks. Applications that load content from the
	// internet should not enable this setting. Also configurable using the
	// "ignore-certificate-errors" command-line switch. Can be overridden for
	// individual CefRequestContext instances via the
	// CefRequestContextSettings.ignore_certificate_errors value.
	///
	ErrWsUpgrade                       CErrorcodeT = C.ERR_WS_UPGRADE
	ErrReadIfReadyNotImplemented       CErrorcodeT = C.ERR_READ_IF_READY_NOT_IMPLEMENTED
	ErrNoBufferSpace                   CErrorcodeT = C.ERR_NO_BUFFER_SPACE
	ErrSslClientAuthNoCommonAlgorithms CErrorcodeT = C.ERR_SSL_CLIENT_AUTH_NO_COMMON_ALGORITHMS
	ErrEarlyDataRejected               CErrorcodeT = C.ERR_EARLY_DATA_REJECTED
	ErrWrongVersionOnEarlyData         CErrorcodeT = C.ERR_WRONG_VERSION_ON_EARLY_DATA
	ErrTls13DowngradeDetected          CErrorcodeT = C.ERR_TLS13_DOWNGRADE_DETECTED
	ErrSslKeyUsageIncompatible         CErrorcodeT = C.ERR_SSL_KEY_USAGE_INCOMPATIBLE
	ErrCertCommonNameInvalid           CErrorcodeT = C.ERR_CERT_COMMON_NAME_INVALID
	ErrCertDateInvalid                 CErrorcodeT = C.ERR_CERT_DATE_INVALID
	ErrCertAuthorityInvalid            CErrorcodeT = C.ERR_CERT_AUTHORITY_INVALID
	ErrCertContainsErrors              CErrorcodeT = C.ERR_CERT_CONTAINS_ERRORS
	ErrCertNoRevocationMechanism       CErrorcodeT = C.ERR_CERT_NO_REVOCATION_MECHANISM
	ErrCertUnableToCheckRevocation     CErrorcodeT = C.ERR_CERT_UNABLE_TO_CHECK_REVOCATION
	ErrCertRevoked                     CErrorcodeT = C.ERR_CERT_REVOKED
	ErrCertInvalid                     CErrorcodeT = C.ERR_CERT_INVALID
	ErrCertWeakSignatureAlgorithm      CErrorcodeT = C.ERR_CERT_WEAK_SIGNATURE_ALGORITHM
	ErrCertNonUniqueName               CErrorcodeT = C.ERR_CERT_NON_UNIQUE_NAME

	///
	// Default encoding for Web content. If empty "ISO-8859-1" will be used. Also
	// configurable using the "default-encoding" command-line switch.
	///
	ErrCertWeakKey                 CErrorcodeT = C.ERR_CERT_WEAK_KEY
	ErrCertNameConstraintViolation CErrorcodeT = C.ERR_CERT_NAME_CONSTRAINT_VIOLATION

	///
	// Controls the loading of fonts from remote sources. Also configurable using
	// the "disable-remote-fonts" command-line switch.
	///
	ErrCertValidityTooLong             CErrorcodeT = C.ERR_CERT_VALIDITY_TOO_LONG
	ErrCertificateTransparencyRequired CErrorcodeT = C.ERR_CERTIFICATE_TRANSPARENCY_REQUIRED
	ErrCertSymantecLegacy              CErrorcodeT = C.ERR_CERT_SYMANTEC_LEGACY

	///
	// Controls whether JavaScript can be used to close windows that were not
	// opened via JavaScript. JavaScript can still be used to close windows that
	// were opened via JavaScript or that have no back/forward history. Also
	// configurable using the "disable-javascript-close-windows" command-line
	// switch.
	///
	ErrCertKnownInterceptionBlocked CErrorcodeT = C.ERR_CERT_KNOWN_INTERCEPTION_BLOCKED
	ErrSslObsoleteVersion           CErrorcodeT = C.ERR_SSL_OBSOLETE_VERSION
	ErrCertEnd                      CErrorcodeT = C.ERR_CERT_END

	///
	// Controls whether DOM pasting is supported in the editor via
	// execCommand("paste"). The |javascript_access_clipboard| setting must also
	// be enabled. Also configurable using the "disable-javascript-dom-paste"
	// command-line switch.
	///
	ErrInvalidUrl          CErrorcodeT = C.ERR_INVALID_URL
	ErrDisallowedUrlScheme CErrorcodeT = C.ERR_DISALLOWED_URL_SCHEME

	///
	// Controls whether any plugins will be loaded. Also configurable using the
	// "disable-plugins" command-line switch.
	///
	ErrUnknownUrlScheme CErrorcodeT = C.ERR_UNKNOWN_URL_SCHEME
	ErrInvalidRedirect  CErrorcodeT = C.ERR_INVALID_REDIRECT

	///
	// Controls whether file URLs will have access to all URLs. Also configurable
	// using the "allow-universal-access-from-files" command-line switch.
	///
	ErrTooManyRedirects       CErrorcodeT = C.ERR_TOO_MANY_REDIRECTS
	ErrUnsafeRedirect         CErrorcodeT = C.ERR_UNSAFE_REDIRECT
	ErrUnsafePort             CErrorcodeT = C.ERR_UNSAFE_PORT
	ErrInvalidResponse        CErrorcodeT = C.ERR_INVALID_RESPONSE
	ErrInvalidChunkedEncoding CErrorcodeT = C.ERR_INVALID_CHUNKED_ENCODING
	ErrMethodNotSupported     CErrorcodeT = C.ERR_METHOD_NOT_SUPPORTED
	ErrUnexpectedProxyAuth    CErrorcodeT = C.ERR_UNEXPECTED_PROXY_AUTH
	ErrEmptyResponse          CErrorcodeT = C.ERR_EMPTY_RESPONSE
	ErrResponseHeadersTooBig  CErrorcodeT = C.ERR_RESPONSE_HEADERS_TOO_BIG

	///
	// Controls whether text areas can be resized. Also configurable using the
	// "disable-text-area-resize" command-line switch.
	///
	ErrPacScriptFailed                       CErrorcodeT = C.ERR_PAC_SCRIPT_FAILED
	ErrRequestRangeNotSatisfiable            CErrorcodeT = C.ERR_REQUEST_RANGE_NOT_SATISFIABLE
	ErrMalformedIdentity                     CErrorcodeT = C.ERR_MALFORMED_IDENTITY
	ErrContentDecodingFailed                 CErrorcodeT = C.ERR_CONTENT_DECODING_FAILED
	ErrNetworkIoSuspended                    CErrorcodeT = C.ERR_NETWORK_IO_SUSPENDED
	ErrSynReplyNotReceived                   CErrorcodeT = C.ERR_SYN_REPLY_NOT_RECEIVED
	ErrEncodingConversionFailed              CErrorcodeT = C.ERR_ENCODING_CONVERSION_FAILED
	ErrUnrecognizedFtpDirectoryListingFormat CErrorcodeT = C.ERR_UNRECOGNIZED_FTP_DIRECTORY_LISTING_FORMAT
	ErrNoSupportedProxies                    CErrorcodeT = C.ERR_NO_SUPPORTED_PROXIES
	ErrHttp2ProtocolError                    CErrorcodeT = C.ERR_HTTP2_PROTOCOL_ERROR
	ErrInvalidAuthCredentials                CErrorcodeT = C.ERR_INVALID_AUTH_CREDENTIALS
	ErrUnsupportedAuthScheme                 CErrorcodeT = C.ERR_UNSUPPORTED_AUTH_SCHEME
	ErrEncodingDetectionFailed               CErrorcodeT = C.ERR_ENCODING_DETECTION_FAILED
	ErrMissingAuthCredentials                CErrorcodeT = C.ERR_MISSING_AUTH_CREDENTIALS
	ErrUnexpectedSecurityLibraryStatus       CErrorcodeT = C.ERR_UNEXPECTED_SECURITY_LIBRARY_STATUS
	ErrMisconfiguredAuthEnvironment          CErrorcodeT = C.ERR_MISCONFIGURED_AUTH_ENVIRONMENT
	ErrUndocumentedSecurityLibraryStatus     CErrorcodeT = C.ERR_UNDOCUMENTED_SECURITY_LIBRARY_STATUS
	ErrResponseBodyTooBigToDrain             CErrorcodeT = C.ERR_RESPONSE_BODY_TOO_BIG_TO_DRAIN

	///
	// Cancel immediately.
	///
	ErrResponseHeadersMultipleContentLength      CErrorcodeT = C.ERR_RESPONSE_HEADERS_MULTIPLE_CONTENT_LENGTH
	ErrIncompleteHttp2Headers                    CErrorcodeT = C.ERR_INCOMPLETE_HTTP2_HEADERS
	ErrPacNotInDhcp                              CErrorcodeT = C.ERR_PAC_NOT_IN_DHCP
	ErrResponseHeadersMultipleContentDisposition CErrorcodeT = C.ERR_RESPONSE_HEADERS_MULTIPLE_CONTENT_DISPOSITION
	ErrResponseHeadersMultipleLocation           CErrorcodeT = C.ERR_RESPONSE_HEADERS_MULTIPLE_LOCATION
	ErrHttp2ServerRefusedStream                  CErrorcodeT = C.ERR_HTTP2_SERVER_REFUSED_STREAM

	///
	// Scheme component not including the colon (e.g., "http").
	///
	ErrHttp2PingFailed           CErrorcodeT = C.ERR_HTTP2_PING_FAILED
	ErrContentLengthMismatch     CErrorcodeT = C.ERR_CONTENT_LENGTH_MISMATCH
	ErrIncompleteChunkedEncoding CErrorcodeT = C.ERR_INCOMPLETE_CHUNKED_ENCODING
	ErrQuicProtocolError         CErrorcodeT = C.ERR_QUIC_PROTOCOL_ERROR
	ErrResponseHeadersTruncated  CErrorcodeT = C.ERR_RESPONSE_HEADERS_TRUNCATED
	ErrQuicHandshakeFailed       CErrorcodeT = C.ERR_QUIC_HANDSHAKE_FAILED

	///
	// Origin contains just the scheme, host, and port from a URL. Equivalent to
	// clearing any username and password, replacing the path with a slash, and
	// clearing everything after that. This value will be empty for non-standard
	// URLs.
	///
	ErrHttp2InadequateTransportSecurity   CErrorcodeT = C.ERR_HTTP2_INADEQUATE_TRANSPORT_SECURITY
	ErrHttp2FlowControlError              CErrorcodeT = C.ERR_HTTP2_FLOW_CONTROL_ERROR
	ErrHttp2FrameSizeError                CErrorcodeT = C.ERR_HTTP2_FRAME_SIZE_ERROR
	ErrHttp2CompressionError              CErrorcodeT = C.ERR_HTTP2_COMPRESSION_ERROR
	ErrProxyAuthRequestedWithNoConnection CErrorcodeT = C.ERR_PROXY_AUTH_REQUESTED_WITH_NO_CONNECTION

	///
	// Fragment (hash) identifier component (i.e., the string following the '#').
	///
	ErrHttp11Required      CErrorcodeT = C.ERR_HTTP_1_1_REQUIRED
	ErrProxyHttp11Required CErrorcodeT = C.ERR_PROXY_HTTP_1_1_REQUIRED

	///
	// Cookie priority values.
	///
	ErrPacScriptTerminated CErrorcodeT = C.ERR_PAC_SCRIPT_TERMINATED

	///
	// Cookie same site values.
	///
	ErrInvalidHttpResponse                   CErrorcodeT = C.ERR_INVALID_HTTP_RESPONSE
	ErrContentDecodingInitFailed             CErrorcodeT = C.ERR_CONTENT_DECODING_INIT_FAILED
	ErrHttp2RstStreamNoErrorReceived         CErrorcodeT = C.ERR_HTTP2_RST_STREAM_NO_ERROR_RECEIVED
	ErrHttp2PushedStreamNotAvailable         CErrorcodeT = C.ERR_HTTP2_PUSHED_STREAM_NOT_AVAILABLE
	ErrHttp2ClaimedPushedStreamResetByServer CErrorcodeT = C.ERR_HTTP2_CLAIMED_PUSHED_STREAM_RESET_BY_SERVER
	ErrTooManyRetries                        CErrorcodeT = C.ERR_TOO_MANY_RETRIES
	ErrHttp2StreamClosed                     CErrorcodeT = C.ERR_HTTP2_STREAM_CLOSED
	ErrHttp2ClientRefusedStream              CErrorcodeT = C.ERR_HTTP2_CLIENT_REFUSED_STREAM
	ErrHttp2PushedResponseDoesNotMatch       CErrorcodeT = C.ERR_HTTP2_PUSHED_RESPONSE_DOES_NOT_MATCH
	ErrHttpResponseCodeFailure               CErrorcodeT = C.ERR_HTTP_RESPONSE_CODE_FAILURE
	ErrQuicCertRootNotKnown                  CErrorcodeT = C.ERR_QUIC_CERT_ROOT_NOT_KNOWN
	ErrCacheMiss                             CErrorcodeT = C.ERR_CACHE_MISS
	ErrCacheReadFailure                      CErrorcodeT = C.ERR_CACHE_READ_FAILURE
	ErrCacheWriteFailure                     CErrorcodeT = C.ERR_CACHE_WRITE_FAILURE
	ErrCacheOperationNotSupported            CErrorcodeT = C.ERR_CACHE_OPERATION_NOT_SUPPORTED
	ErrCacheOpenFailure                      CErrorcodeT = C.ERR_CACHE_OPEN_FAILURE
	ErrCacheCreateFailure                    CErrorcodeT = C.ERR_CACHE_CREATE_FAILURE
	ErrCacheRace                             CErrorcodeT = C.ERR_CACHE_RACE
	ErrCacheChecksumReadFailure              CErrorcodeT = C.ERR_CACHE_CHECKSUM_READ_FAILURE
	ErrCacheChecksumMismatch                 CErrorcodeT = C.ERR_CACHE_CHECKSUM_MISMATCH
	ErrCacheLockTimeout                      CErrorcodeT = C.ERR_CACHE_LOCK_TIMEOUT

	///
	// SIGKILL or task manager kill.
	///
	ErrCacheAuthFailureAfterRead CErrorcodeT = C.ERR_CACHE_AUTH_FAILURE_AFTER_READ

	///
	// Segmentation fault.
	///
	ErrCacheEntryNotSuitable       CErrorcodeT = C.ERR_CACHE_ENTRY_NOT_SUITABLE
	ErrCacheDoomFailure            CErrorcodeT = C.ERR_CACHE_DOOM_FAILURE
	ErrCacheOpenOrCreateFailure    CErrorcodeT = C.ERR_CACHE_OPEN_OR_CREATE_FAILURE
	ErrInsecureResponse            CErrorcodeT = C.ERR_INSECURE_RESPONSE
	ErrNoPrivateKeyForCert         CErrorcodeT = C.ERR_NO_PRIVATE_KEY_FOR_CERT
	ErrAddUserCertFailed           CErrorcodeT = C.ERR_ADD_USER_CERT_FAILED
	ErrInvalidSignedExchange       CErrorcodeT = C.ERR_INVALID_SIGNED_EXCHANGE
	ErrInvalidWebBundle            CErrorcodeT = C.ERR_INVALID_WEB_BUNDLE
	ErrTrustTokenOperationFailed   CErrorcodeT = C.ERR_TRUST_TOKEN_OPERATION_FAILED
	ErrTrustTokenOperationCacheHit CErrorcodeT = C.ERR_TRUST_TOKEN_OPERATION_CACHE_HIT
	ErrFtpFailed                   CErrorcodeT = C.ERR_FTP_FAILED
	ErrFtpServiceUnavailable       CErrorcodeT = C.ERR_FTP_SERVICE_UNAVAILABLE
	ErrFtpTransferAborted          CErrorcodeT = C.ERR_FTP_TRANSFER_ABORTED
	ErrFtpFileBusy                 CErrorcodeT = C.ERR_FTP_FILE_BUSY
	ErrFtpSyntaxError              CErrorcodeT = C.ERR_FTP_SYNTAX_ERROR

	///
	// Directory containing application resources. Can be configured via
	// CefSettings.resources_dir_path.
	///
	ErrFtpCommandNotSupported  CErrorcodeT = C.ERR_FTP_COMMAND_NOT_SUPPORTED
	ErrFtpBadCommandSequence   CErrorcodeT = C.ERR_FTP_BAD_COMMAND_SEQUENCE
	ErrPkcs12ImportBadPassword CErrorcodeT = C.ERR_PKCS12_IMPORT_BAD_PASSWORD
	ErrPkcs12ImportFailed      CErrorcodeT = C.ERR_PKCS12_IMPORT_FAILED

	///
	// Supported error code values.
	///
	ErrImportCaCertNotCa                         CErrorcodeT = C.ERR_IMPORT_CA_CERT_NOT_CA
	ErrImportCertAlreadyExists                   CErrorcodeT = C.ERR_IMPORT_CERT_ALREADY_EXISTS
	ErrImportCaCertFailed                        CErrorcodeT = C.ERR_IMPORT_CA_CERT_FAILED
	ErrImportServerCertFailed                    CErrorcodeT = C.ERR_IMPORT_SERVER_CERT_FAILED
	ErrPkcs12ImportInvalidMac                    CErrorcodeT = C.ERR_PKCS12_IMPORT_INVALID_MAC
	ErrPkcs12ImportInvalidFile                   CErrorcodeT = C.ERR_PKCS12_IMPORT_INVALID_FILE
	ErrPkcs12ImportUnsupported                   CErrorcodeT = C.ERR_PKCS12_IMPORT_UNSUPPORTED
	ErrKeyGenerationFailed                       CErrorcodeT = C.ERR_KEY_GENERATION_FAILED
	ErrPrivateKeyExportFailed                    CErrorcodeT = C.ERR_PRIVATE_KEY_EXPORT_FAILED
	ErrSelfSignedCertGenerationFailed            CErrorcodeT = C.ERR_SELF_SIGNED_CERT_GENERATION_FAILED
	ErrCertDatabaseChanged                       CErrorcodeT = C.ERR_CERT_DATABASE_CHANGED
	ErrDnsMalformedResponse                      CErrorcodeT = C.ERR_DNS_MALFORMED_RESPONSE
	ErrDnsServerRequiresTcp                      CErrorcodeT = C.ERR_DNS_SERVER_REQUIRES_TCP
	ErrDnsServerFailed                           CErrorcodeT = C.ERR_DNS_SERVER_FAILED
	ErrDnsTimedOut                               CErrorcodeT = C.ERR_DNS_TIMED_OUT
	ErrDnsCacheMiss                              CErrorcodeT = C.ERR_DNS_CACHE_MISS
	ErrDnsSearchEmpty                            CErrorcodeT = C.ERR_DNS_SEARCH_EMPTY
	ErrDnsSortError                              CErrorcodeT = C.ERR_DNS_SORT_ERROR
	ErrDnsSecureResolverHostnameResolutionFailed CErrorcodeT = C.ERR_DNS_SECURE_RESOLVER_HOSTNAME_RESOLUTION_FAILED
)

///
// Supported certificate status code values. See net\cert\cert_status_flags.h
// for more information. CERT_STATUS_NONE is new in CEF because we use an
// enum while cert_status_flags.h uses a typedef and static const variables.
///
type CCertStatusT C.cef_cert_status_t

const (
	CertStatusNone              CCertStatusT = C.CERT_STATUS_NONE
	CertStatusCommonNameInvalid CCertStatusT = C.CERT_STATUS_COMMON_NAME_INVALID
	CertStatusDateInvalid       CCertStatusT = C.CERT_STATUS_DATE_INVALID
	CertStatusAuthorityInvalid  CCertStatusT = C.CERT_STATUS_AUTHORITY_INVALID

	// 1 << 3 is reserved for ERR_CERT_CONTAINS_ERRORS (not useful with WinHTTP).
	CertStatusNoRevocationMechanism   CCertStatusT = C.CERT_STATUS_NO_REVOCATION_MECHANISM
	CertStatusUnableToCheckRevocation CCertStatusT = C.CERT_STATUS_UNABLE_TO_CHECK_REVOCATION
	CertStatusRevoked                 CCertStatusT = C.CERT_STATUS_REVOKED
	CertStatusInvalid                 CCertStatusT = C.CERT_STATUS_INVALID
	CertStatusWeakSignatureAlgorithm  CCertStatusT = C.CERT_STATUS_WEAK_SIGNATURE_ALGORITHM

	// 1 << 9 was used for CERT_STATUS_NOT_IN_DNS
	CertStatusNonUniqueName CCertStatusT = C.CERT_STATUS_NON_UNIQUE_NAME
	CertStatusWeakKey       CCertStatusT = C.CERT_STATUS_WEAK_KEY

	// 1 << 12 was used for CERT_STATUS_WEAK_DH_KEY
	CertStatusPinnedKeyMissing        CCertStatusT = C.CERT_STATUS_PINNED_KEY_MISSING
	CertStatusNameConstraintViolation CCertStatusT = C.CERT_STATUS_NAME_CONSTRAINT_VIOLATION
	CertStatusValidityTooLong         CCertStatusT = C.CERT_STATUS_VALIDITY_TOO_LONG

	// Bits 16 to 31 are for non-error statuses.
	CertStatusIsEv               CCertStatusT = C.CERT_STATUS_IS_EV
	CertStatusRevCheckingEnabled CCertStatusT = C.CERT_STATUS_REV_CHECKING_ENABLED

	// Bit 18 was CERT_STATUS_IS_DNSSEC
	CertStatusSha1SignaturePresent CCertStatusT = C.CERT_STATUS_SHA1_SIGNATURE_PRESENT
	CertStatusCtComplianceFailed   CCertStatusT = C.CERT_STATUS_CT_COMPLIANCE_FAILED
)

///
// The manner in which a link click should be opened. These constants match
// their equivalents in Chromium's window_open_disposition.h and should not be
// renumbered.
///
type CWindowOpenDispositionT C.cef_window_open_disposition_t

const (
	WodUnknown          CWindowOpenDispositionT = C.WOD_UNKNOWN
	WodCurrentTab       CWindowOpenDispositionT = C.WOD_CURRENT_TAB
	WodSingletonTab     CWindowOpenDispositionT = C.WOD_SINGLETON_TAB
	WodNewForegroundTab CWindowOpenDispositionT = C.WOD_NEW_FOREGROUND_TAB
	WodNewBackgroundTab CWindowOpenDispositionT = C.WOD_NEW_BACKGROUND_TAB
	WodNewPopup         CWindowOpenDispositionT = C.WOD_NEW_POPUP
	WodNewWindow        CWindowOpenDispositionT = C.WOD_NEW_WINDOW
	WodSaveToDisk       CWindowOpenDispositionT = C.WOD_SAVE_TO_DISK
	WodOffTheRecord     CWindowOpenDispositionT = C.WOD_OFF_THE_RECORD
	WodIgnoreAction     CWindowOpenDispositionT = C.WOD_IGNORE_ACTION
)

///
// "Verb" of a drag-and-drop operation as negotiated between the source and
// destination. These constants match their equivalents in WebCore's
// DragActions.h and should not be renumbered.
///
type CDragOperationsMaskT C.cef_drag_operations_mask_t

const (
	DragOperationNone    CDragOperationsMaskT = C.DRAG_OPERATION_NONE
	DragOperationCopy    CDragOperationsMaskT = C.DRAG_OPERATION_COPY
	DragOperationLink    CDragOperationsMaskT = C.DRAG_OPERATION_LINK
	DragOperationGeneric CDragOperationsMaskT = C.DRAG_OPERATION_GENERIC
	DragOperationPrivate CDragOperationsMaskT = C.DRAG_OPERATION_PRIVATE
	DragOperationMove    CDragOperationsMaskT = C.DRAG_OPERATION_MOVE
	DragOperationDelete  CDragOperationsMaskT = C.DRAG_OPERATION_DELETE
	DragOperationEvery   CDragOperationsMaskT = C.DRAG_OPERATION_EVERY
)

///
// Input mode of a virtual keyboard. These constants match their equivalents
// in Chromium's text_input_mode.h and should not be renumbered.
// See https://html.spec.whatwg.org/#input-modalities:-the-inputmode-attribute
///
type CTextInputModeT C.cef_text_input_mode_t

const (
	CefTextInputModeDefault CTextInputModeT = C.CEF_TEXT_INPUT_MODE_DEFAULT
	CefTextInputModeNone    CTextInputModeT = C.CEF_TEXT_INPUT_MODE_NONE
	CefTextInputModeText    CTextInputModeT = C.CEF_TEXT_INPUT_MODE_TEXT
	CefTextInputModeTel     CTextInputModeT = C.CEF_TEXT_INPUT_MODE_TEL
	CefTextInputModeUrl     CTextInputModeT = C.CEF_TEXT_INPUT_MODE_URL
	CefTextInputModeEmail   CTextInputModeT = C.CEF_TEXT_INPUT_MODE_EMAIL
	CefTextInputModeNumeric CTextInputModeT = C.CEF_TEXT_INPUT_MODE_NUMERIC
	CefTextInputModeDecimal CTextInputModeT = C.CEF_TEXT_INPUT_MODE_DECIMAL
	CefTextInputModeSearch  CTextInputModeT = C.CEF_TEXT_INPUT_MODE_SEARCH
	CefTextInputModeMax     CTextInputModeT = C.CEF_TEXT_INPUT_MODE_MAX
)

///
// V8 access control values.
///
type CV8AccesscontrolT C.cef_v8_accesscontrol_t

const (
	V8AccessControlDefault              CV8AccesscontrolT = C.V8_ACCESS_CONTROL_DEFAULT
	V8AccessControlAllCanRead           CV8AccesscontrolT = C.V8_ACCESS_CONTROL_ALL_CAN_READ
	V8AccessControlAllCanWrite          CV8AccesscontrolT = C.V8_ACCESS_CONTROL_ALL_CAN_WRITE
	V8AccessControlProhibitsOverwriting CV8AccesscontrolT = C.V8_ACCESS_CONTROL_PROHIBITS_OVERWRITING
)

///
// V8 property attribute values.
///
type CV8PropertyattributeT C.cef_v8_propertyattribute_t

const (
	V8PropertyAttributeNone CV8PropertyattributeT = C.V8_PROPERTY_ATTRIBUTE_NONE

	//   Configurable
	V8PropertyAttributeReadonly   CV8PropertyattributeT = C.V8_PROPERTY_ATTRIBUTE_READONLY
	V8PropertyAttributeDontenum   CV8PropertyattributeT = C.V8_PROPERTY_ATTRIBUTE_DONTENUM
	V8PropertyAttributeDontdelete CV8PropertyattributeT = C.V8_PROPERTY_ATTRIBUTE_DONTDELETE
)

///
// Post data elements may represent either bytes or files.
///
type CPostdataelementTypeT C.cef_postdataelement_type_t

const (
	PdeTypeEmpty CPostdataelementTypeT = C.PDE_TYPE_EMPTY
	PdeTypeBytes CPostdataelementTypeT = C.PDE_TYPE_BYTES
	PdeTypeFile  CPostdataelementTypeT = C.PDE_TYPE_FILE
)

///
// Resource type for a request.
///
type CResourceTypeT C.cef_resource_type_t

const (

	///
	// Top level page.
	///
	RtMainFrame CResourceTypeT = C.RT_MAIN_FRAME

	///
	// Frame or iframe.
	///
	RtSubFrame CResourceTypeT = C.RT_SUB_FRAME

	///
	// CSS stylesheet.
	///
	RtStylesheet CResourceTypeT = C.RT_STYLESHEET

	///
	// External script.
	///
	RtScript CResourceTypeT = C.RT_SCRIPT

	///
	// Image (jpg/gif/png/etc).
	///
	RtImage CResourceTypeT = C.RT_IMAGE

	///
	// Font.
	///
	RtFontResource CResourceTypeT = C.RT_FONT_RESOURCE

	///
	// Some other subresource. This is the default type if the actual type is
	// unknown.
	///
	RtSubResource CResourceTypeT = C.RT_SUB_RESOURCE

	///
	// Object (or embed) tag for a plugin, or a resource that a plugin requested.
	///
	RtObject CResourceTypeT = C.RT_OBJECT

	///
	// Media resource.
	///
	RtMedia CResourceTypeT = C.RT_MEDIA

	///
	// Main resource of a dedicated worker.
	///
	RtWorker CResourceTypeT = C.RT_WORKER

	///
	// Main resource of a shared worker.
	///
	RtSharedWorker CResourceTypeT = C.RT_SHARED_WORKER

	///
	// Explicitly requested prefetch.
	///
	RtPrefetch CResourceTypeT = C.RT_PREFETCH

	///
	// Favicon.
	///
	RtFavicon CResourceTypeT = C.RT_FAVICON

	///
	// XMLHttpRequest.
	///
	RtXhr CResourceTypeT = C.RT_XHR

	///
	// A request for a <ping>
	///
	RtPing CResourceTypeT = C.RT_PING

	///
	// Main resource of a service worker.
	///
	RtServiceWorker CResourceTypeT = C.RT_SERVICE_WORKER

	///
	// A report of Content Security Policy violations.
	///
	RtCspReport CResourceTypeT = C.RT_CSP_REPORT

	///
	// A resource that a plugin requested.
	///
	RtPluginResource CResourceTypeT = C.RT_PLUGIN_RESOURCE
)

///
// Transition type for a request. Made up of one source value and 0 or more
// qualifiers.
///
type CTransitionTypeT C.cef_transition_type_t

const (

	///
	// Source is a link click or the JavaScript window.open function. This is
	// also the default value for requests like sub-resource loads that are not
	// navigations.
	///
	TtLink CTransitionTypeT = C.TT_LINK

	///
	// Source is some other "explicit" navigation. This is the default value for
	// navigations where the actual type is unknown. See also TT_DIRECT_LOAD_FLAG.
	///
	TtExplicit CTransitionTypeT = C.TT_EXPLICIT

	///
	// Source is a subframe navigation. This is any content that is automatically
	// loaded in a non-toplevel frame. For example, if a page consists of several
	// frames containing ads, those ad URLs will have this transition type.
	// The user may not even realize the content in these pages is a separate
	// frame, so may not care about the URL.
	///
	TtAutoSubframe CTransitionTypeT = C.TT_AUTO_SUBFRAME

	///
	// Source is a subframe navigation explicitly requested by the user that will
	// generate new navigation entries in the back/forward list. These are
	// probably more important than frames that were automatically loaded in
	// the background because the user probably cares about the fact that this
	// link was loaded.
	///
	TtManualSubframe CTransitionTypeT = C.TT_MANUAL_SUBFRAME

	///
	// Source is a form submission by the user. NOTE: In some situations
	// submitting a form does not result in this transition type. This can happen
	// if the form uses a script to submit the contents.
	///
	TtFormSubmit CTransitionTypeT = C.TT_FORM_SUBMIT

	///
	// Source is a "reload" of the page via the Reload function or by re-visiting
	// the same URL. NOTE: This is distinct from the concept of whether a
	// particular load uses "reload semantics" (i.e. bypasses cached data).
	///
	TtReload CTransitionTypeT = C.TT_RELOAD

	///
	// General mask defining the bits used for the source values.
	///
	TtSourceMask CTransitionTypeT = C.TT_SOURCE_MASK

	///
	// Attempted to visit a URL but was blocked.
	///
	TtBlockedFlag CTransitionTypeT = C.TT_BLOCKED_FLAG

	///
	// Used the Forward or Back function to navigate among browsing history.
	// Will be ORed to the transition type for the original load.
	///
	TtForwardBackFlag CTransitionTypeT = C.TT_FORWARD_BACK_FLAG

	///
	// Loaded a URL directly via CreateBrowser, LoadURL or LoadRequest.
	///
	TtDirectLoadFlag CTransitionTypeT = C.TT_DIRECT_LOAD_FLAG

	///
	// The beginning of a navigation chain.
	///
	TtChainStartFlag CTransitionTypeT = C.TT_CHAIN_START_FLAG

	///
	// The last transition in a redirect chain.
	///
	TtChainEndFlag CTransitionTypeT = C.TT_CHAIN_END_FLAG

	///
	// Redirects caused by JavaScript or a meta refresh tag on the page.
	///
	TtClientRedirectFlag CTransitionTypeT = C.TT_CLIENT_REDIRECT_FLAG

	///
	// Redirects sent from the server by HTTP headers.
	///
	TtServerRedirectFlag CTransitionTypeT = C.TT_SERVER_REDIRECT_FLAG

	///
	// Used to test whether a transition involves a redirect.
	///
	TtIsRedirectMask CTransitionTypeT = C.TT_IS_REDIRECT_MASK

	///
	// General mask defining the bits used for the qualifiers.
	///
	TtQualifierMask CTransitionTypeT = C.TT_QUALIFIER_MASK
)

///
// Flags used to customize the behavior of CefURLRequest.
///
type CUrlrequestFlagsT C.cef_urlrequest_flags_t

const (

	///
	// Default behavior.
	///
	UrFlagNone CUrlrequestFlagsT = C.UR_FLAG_NONE

	///
	// If set the cache will be skipped when handling the request. Setting this
	// value is equivalent to specifying the "Cache-Control: no-cache" request
	// header. Setting this value in combination with UR_FLAG_ONLY_FROM_CACHE will
	// cause the request to fail.
	///
	UrFlagSkipCache CUrlrequestFlagsT = C.UR_FLAG_SKIP_CACHE

	///
	// If set the request will fail if it cannot be served from the cache (or some
	// equivalent local store). Setting this value is equivalent to specifying the
	// "Cache-Control: only-if-cached" request header. Setting this value in
	// combination with UR_FLAG_SKIP_CACHE or UR_FLAG_DISABLE_CACHE will cause the
	// request to fail.
	///
	UrFlagOnlyFromCache CUrlrequestFlagsT = C.UR_FLAG_ONLY_FROM_CACHE

	///
	// If set the cache will not be used at all. Setting this value is equivalent
	// to specifying the "Cache-Control: no-store" request header. Setting this
	// value in combination with UR_FLAG_ONLY_FROM_CACHE will cause the request to
	// fail.
	///
	UrFlagDisableCache CUrlrequestFlagsT = C.UR_FLAG_DISABLE_CACHE

	///
	// If set user name, password, and cookies may be sent with the request, and
	// cookies may be saved from the response.
	///
	UrFlagAllowStoredCredentials CUrlrequestFlagsT = C.UR_FLAG_ALLOW_STORED_CREDENTIALS

	///
	// If set upload progress events will be generated when a request has a body.
	///
	UrFlagReportUploadProgress CUrlrequestFlagsT = C.UR_FLAG_REPORT_UPLOAD_PROGRESS

	///
	// If set the CefURLRequestClient::OnDownloadData method will not be called.
	///
	UrFlagNoDownloadData CUrlrequestFlagsT = C.UR_FLAG_NO_DOWNLOAD_DATA

	///
	// If set 5XX redirect errors will be propagated to the observer instead of
	// automatically re-tried. This currently only applies for requests
	// originated in the browser process.
	///
	UrFlagNoRetryOn5xx CUrlrequestFlagsT = C.UR_FLAG_NO_RETRY_ON_5XX

	///
	// If set 3XX responses will cause the fetch to halt immediately rather than
	// continue through the redirect.
	///
	UrFlagStopOnRedirect CUrlrequestFlagsT = C.UR_FLAG_STOP_ON_REDIRECT
)

///
// Flags that represent CefURLRequest status.
///
type CUrlrequestStatusT C.cef_urlrequest_status_t

const (

	///
	// Unknown status.
	///
	UrUnknown CUrlrequestStatusT = C.UR_UNKNOWN

	///
	// Request succeeded.
	///
	UrSuccess CUrlrequestStatusT = C.UR_SUCCESS

	///
	// An IO request is pending, and the caller will be informed when it is
	// completed.
	///
	UrIoPending CUrlrequestStatusT = C.UR_IO_PENDING

	///
	// Request was canceled programatically.
	///
	UrCanceled CUrlrequestStatusT = C.UR_CANCELED

	///
	// Request failed for some reason.
	///
	UrFailed CUrlrequestStatusT = C.UR_FAILED
)

///
// Structure representing a point.
///
type CPointT C.cef_point_t

func NewCPointT() *CPointT {
	s := &CPointT{}
	return s
}

func (st *CPointT) X() int {
	return int(st.x)
}

func (st *CPointT) SetX(v int) {
	st.x = (C.int)(v)
}

func (st *CPointT) Y() int {
	return int(st.y)
}

func (st *CPointT) SetY(v int) {
	st.y = (C.int)(v)
}

///
// Structure representing a rectangle.
///
type CRectT C.cef_rect_t

func NewCRectT() *CRectT {
	s := &CRectT{}
	return s
}

func (st *CRectT) X() int {
	return int(st.x)
}

func (st *CRectT) SetX(v int) {
	st.x = (C.int)(v)
}

func (st *CRectT) Y() int {
	return int(st.y)
}

func (st *CRectT) SetY(v int) {
	st.y = (C.int)(v)
}

func (st *CRectT) Width() int {
	return int(st.width)
}

func (st *CRectT) SetWidth(v int) {
	st.width = (C.int)(v)
}

func (st *CRectT) Height() int {
	return int(st.height)
}

func (st *CRectT) SetHeight(v int) {
	st.height = (C.int)(v)
}

///
// Structure representing a size.
///
type CSizeT C.cef_size_t

func NewCSizeT() *CSizeT {
	s := &CSizeT{}
	return s
}

func (st *CSizeT) Width() int {
	return int(st.width)
}

func (st *CSizeT) SetWidth(v int) {
	st.width = (C.int)(v)
}

func (st *CSizeT) Height() int {
	return int(st.height)
}

func (st *CSizeT) SetHeight(v int) {
	st.height = (C.int)(v)
}

///
// Structure representing a range.
///
type CRangeT C.cef_range_t

func NewCRangeT() *CRangeT {
	s := &CRangeT{}
	return s
}

func (st *CRangeT) From() int {
	return int(st.from)
}

func (st *CRangeT) SetFrom(v int) {
	st.from = (C.int)(v)
}

func (st *CRangeT) To() int {
	return int(st.to)
}

func (st *CRangeT) SetTo(v int) {
	st.to = (C.int)(v)
}

///
// Structure representing insets.
///
type CInsetsT C.cef_insets_t

func NewCInsetsT() *CInsetsT {
	s := &CInsetsT{}
	return s
}

func (st *CInsetsT) Top() int {
	return int(st.top)
}

func (st *CInsetsT) SetTop(v int) {
	st.top = (C.int)(v)
}

func (st *CInsetsT) Left() int {
	return int(st.left)
}

func (st *CInsetsT) SetLeft(v int) {
	st.left = (C.int)(v)
}

func (st *CInsetsT) Bottom() int {
	return int(st.bottom)
}

func (st *CInsetsT) SetBottom(v int) {
	st.bottom = (C.int)(v)
}

func (st *CInsetsT) Right() int {
	return int(st.right)
}

func (st *CInsetsT) SetRight(v int) {
	st.right = (C.int)(v)
}

///
// Structure representing a draggable region.
///
type CDraggableRegionT C.cef_draggable_region_t

func NewCDraggableRegionT() *CDraggableRegionT {
	s := &CDraggableRegionT{}
	return s
}

func (st *CDraggableRegionT) Bounds() CRectT {
	return CRectT(st.bounds)
}

func (st *CDraggableRegionT) SetBounds(v CRectT) {
	st.bounds = (C.cef_rect_t)(v)
}

func (st *CDraggableRegionT) Draggable() bool {
	return st.draggable != 0
}

func (st *CDraggableRegionT) SetDraggable(v bool) {
	if v {
		st.draggable = 1
	} else {
		st.draggable = 0
	}
}

///
// Existing process IDs.
///
type CProcessIdT C.cef_process_id_t

const (

	///
	// Browser process.
	///
	PidBrowser CProcessIdT = C.PID_BROWSER

	///
	// Renderer process.
	///
	PidRenderer CProcessIdT = C.PID_RENDERER
)

///
// Existing thread IDs.
///
type CThreadIdT C.cef_thread_id_t

const (

	///
	// The main thread in the browser. This will be the same as the main
	// application thread if CefInitialize() is called with a
	// CefSettings.multi_threaded_message_loop value of false. Do not perform
	// blocking tasks on this thread. All tasks posted after
	// CefBrowserProcessHandler::OnContextInitialized() and before CefShutdown()
	// are guaranteed to run. This thread will outlive all other CEF threads.
	///
	TidUi CThreadIdT = C.TID_UI

	///
	// Used for blocking tasks (e.g. file system access) where the user won't
	// notice if the task takes an arbitrarily long time to complete. All tasks
	// posted after CefBrowserProcessHandler::OnContextInitialized() and before
	// CefShutdown() are guaranteed to run.
	///
	TidFileBackground CThreadIdT = C.TID_FILE_BACKGROUND
	TidFile           CThreadIdT = C.TID_FILE

	///
	// Used for blocking tasks (e.g. file system access) that affect UI or
	// responsiveness of future user interactions. Do not use if an immediate
	// response to a user interaction is expected. All tasks posted after
	// CefBrowserProcessHandler::OnContextInitialized() and before CefShutdown()
	// are guaranteed to run.
	// Examples:
	// - Updating the UI to reflect progress on a long task.
	// - Loading data that might be shown in the UI after a future user
	//   interaction.
	///
	TidFileUserVisible CThreadIdT = C.TID_FILE_USER_VISIBLE

	///
	// Used for blocking tasks (e.g. file system access) that affect UI
	// immediately after a user interaction. All tasks posted after
	// CefBrowserProcessHandler::OnContextInitialized() and before CefShutdown()
	// are guaranteed to run.
	// Example: Generating data shown in the UI immediately after a click.
	///
	TidFileUserBlocking CThreadIdT = C.TID_FILE_USER_BLOCKING

	///
	// Used to launch and terminate browser processes.
	///
	TidProcessLauncher CThreadIdT = C.TID_PROCESS_LAUNCHER

	///
	// Used to process IPC and network messages. Do not perform blocking tasks on
	// this thread. All tasks posted after
	// CefBrowserProcessHandler::OnContextInitialized() and before CefShutdown()
	// are guaranteed to run.
	///
	TidIo CThreadIdT = C.TID_IO

	///
	// The main thread in the renderer. Used for all WebKit and V8 interaction.
	// Tasks may be posted to this thread after
	// CefRenderProcessHandler::OnWebKitInitialized but are not guaranteed to
	// run before sub-process termination (sub-processes may be killed at any time
	// without warning).
	///
	TidRenderer CThreadIdT = C.TID_RENDERER
)

///
// Thread priority values listed in increasing order of importance.
///
type CThreadPriorityT C.cef_thread_priority_t

const (

	///
	// Suitable for threads that shouldn't disrupt high priority work.
	///
	TpBackground CThreadPriorityT = C.TP_BACKGROUND

	///
	// Default priority level.
	///
	TpNormal CThreadPriorityT = C.TP_NORMAL

	///
	// Suitable for threads which generate data for the display (at ~60Hz).
	///
	TpDisplay CThreadPriorityT = C.TP_DISPLAY

	///
	// Suitable for low-latency, glitch-resistant audio.
	///
	TpRealtimeAudio CThreadPriorityT = C.TP_REALTIME_AUDIO
)

///
// Message loop types. Indicates the set of asynchronous events that a message
// loop can process.
///
type CMessageLoopTypeT C.cef_message_loop_type_t

const (

	///
	// Supports tasks and timers.
	///
	MlTypeDefault CMessageLoopTypeT = C.ML_TYPE_DEFAULT

	///
	// Supports tasks, timers and native UI events (e.g. Windows messages).
	///
	MlTypeUi CMessageLoopTypeT = C.ML_TYPE_UI

	///
	// Supports tasks, timers and asynchronous IO events.
	///
	MlTypeIo CMessageLoopTypeT = C.ML_TYPE_IO
)

///
// Windows COM initialization mode. Specifies how COM will be initialized for a
// new thread.
///
type CComInitModeT C.cef_com_init_mode_t

const (

	///
	// No COM initialization.
	///
	ComInitModeNone CComInitModeT = C.COM_INIT_MODE_NONE

	///
	// Initialize COM using single-threaded apartments.
	///
	ComInitModeSta CComInitModeT = C.COM_INIT_MODE_STA

	///
	// Initialize COM using multi-threaded apartments.
	///
	ComInitModeMta CComInitModeT = C.COM_INIT_MODE_MTA
)

///
// Supported value types.
///
type CValueTypeT C.cef_value_type_t

const (
	VtypeInvalid    CValueTypeT = C.VTYPE_INVALID
	VtypeNull       CValueTypeT = C.VTYPE_NULL
	VtypeBool       CValueTypeT = C.VTYPE_BOOL
	VtypeInt        CValueTypeT = C.VTYPE_INT
	VtypeDouble     CValueTypeT = C.VTYPE_DOUBLE
	VtypeString     CValueTypeT = C.VTYPE_STRING
	VtypeBinary     CValueTypeT = C.VTYPE_BINARY
	VtypeDictionary CValueTypeT = C.VTYPE_DICTIONARY
	VtypeList       CValueTypeT = C.VTYPE_LIST
)

///
// Supported JavaScript dialog types.
///
type CJsdialogTypeT C.cef_jsdialog_type_t

const (
	JsdialogtypeAlert   CJsdialogTypeT = C.JSDIALOGTYPE_ALERT
	JsdialogtypeConfirm CJsdialogTypeT = C.JSDIALOGTYPE_CONFIRM
	JsdialogtypePrompt  CJsdialogTypeT = C.JSDIALOGTYPE_PROMPT
)

///
// Screen information used when window rendering is disabled. This structure is
// passed as a parameter to CefRenderHandler::GetScreenInfo and should be filled
// in by the client.
///
type CScreenInfoT C.cef_screen_info_t

func NewCScreenInfoT() *CScreenInfoT {
	s := &CScreenInfoT{}
	return s
}

func (st *CScreenInfoT) DeviceScaleFactor() float32 {
	return float32(st.device_scale_factor)
}

func (st *CScreenInfoT) SetDeviceScaleFactor(v float32) {
	st.device_scale_factor = (C.float)(v)
}

func (st *CScreenInfoT) Depth() int {
	return int(st.depth)
}

func (st *CScreenInfoT) SetDepth(v int) {
	st.depth = (C.int)(v)
}

func (st *CScreenInfoT) DepthPerComponent() int {
	return int(st.depth_per_component)
}

func (st *CScreenInfoT) SetDepthPerComponent(v int) {
	st.depth_per_component = (C.int)(v)
}

func (st *CScreenInfoT) IsMonochrome() int {
	return int(st.is_monochrome)
}

func (st *CScreenInfoT) SetIsMonochrome(v int) {
	st.is_monochrome = (C.int)(v)
}

func (st *CScreenInfoT) Rect() CRectT {
	return CRectT(st.rect)
}

func (st *CScreenInfoT) SetRect(v CRectT) {
	st.rect = (C.cef_rect_t)(v)
}

func (st *CScreenInfoT) AvailableRect() CRectT {
	return CRectT(st.available_rect)
}

func (st *CScreenInfoT) SetAvailableRect(v CRectT) {
	st.available_rect = (C.cef_rect_t)(v)
}

///
// Supported menu IDs. Non-English translations can be provided for the
// IDS_MENU_* strings in CefResourceBundleHandler::GetLocalizedString().
///
type CMenuIdT C.cef_menu_id_t

const (

	// Navigation.
	MenuIdBack          CMenuIdT = C.MENU_ID_BACK
	MenuIdForward       CMenuIdT = C.MENU_ID_FORWARD
	MenuIdReload        CMenuIdT = C.MENU_ID_RELOAD
	MenuIdReloadNocache CMenuIdT = C.MENU_ID_RELOAD_NOCACHE
	MenuIdStopload      CMenuIdT = C.MENU_ID_STOPLOAD

	// Editing.
	MenuIdUndo      CMenuIdT = C.MENU_ID_UNDO
	MenuIdRedo      CMenuIdT = C.MENU_ID_REDO
	MenuIdCut       CMenuIdT = C.MENU_ID_CUT
	MenuIdCopy      CMenuIdT = C.MENU_ID_COPY
	MenuIdPaste     CMenuIdT = C.MENU_ID_PASTE
	MenuIdDelete    CMenuIdT = C.MENU_ID_DELETE
	MenuIdSelectAll CMenuIdT = C.MENU_ID_SELECT_ALL

	// Miscellaneous.
	MenuIdFind       CMenuIdT = C.MENU_ID_FIND
	MenuIdPrint      CMenuIdT = C.MENU_ID_PRINT
	MenuIdViewSource CMenuIdT = C.MENU_ID_VIEW_SOURCE

	// Spell checking word correction suggestions.
	MenuIdSpellcheckSuggestion0    CMenuIdT = C.MENU_ID_SPELLCHECK_SUGGESTION_0
	MenuIdSpellcheckSuggestion1    CMenuIdT = C.MENU_ID_SPELLCHECK_SUGGESTION_1
	MenuIdSpellcheckSuggestion2    CMenuIdT = C.MENU_ID_SPELLCHECK_SUGGESTION_2
	MenuIdSpellcheckSuggestion3    CMenuIdT = C.MENU_ID_SPELLCHECK_SUGGESTION_3
	MenuIdSpellcheckSuggestion4    CMenuIdT = C.MENU_ID_SPELLCHECK_SUGGESTION_4
	MenuIdSpellcheckSuggestionLast CMenuIdT = C.MENU_ID_SPELLCHECK_SUGGESTION_LAST
	MenuIdNoSpellingSuggestions    CMenuIdT = C.MENU_ID_NO_SPELLING_SUGGESTIONS
	MenuIdAddToDictionary          CMenuIdT = C.MENU_ID_ADD_TO_DICTIONARY

	// Custom menu items originating from the renderer process. For example,
	// plugin placeholder menu items or Flash menu items.
	MenuIdCustomFirst CMenuIdT = C.MENU_ID_CUSTOM_FIRST
	MenuIdCustomLast  CMenuIdT = C.MENU_ID_CUSTOM_LAST

	// All user-defined menu IDs should come between MENU_ID_USER_FIRST and
	// MENU_ID_USER_LAST to avoid overlapping the Chromium and CEF ID ranges
	// defined in the tools/gritsettings/resource_ids file.
	MenuIdUserFirst CMenuIdT = C.MENU_ID_USER_FIRST
	MenuIdUserLast  CMenuIdT = C.MENU_ID_USER_LAST
)

///
// Mouse button types.
///
type CMouseButtonTypeT C.cef_mouse_button_type_t

const (
	MbtLeft   CMouseButtonTypeT = C.MBT_LEFT
	MbtMiddle CMouseButtonTypeT = C.MBT_MIDDLE
	MbtRight  CMouseButtonTypeT = C.MBT_RIGHT
)

///
// Structure representing mouse event information.
///
type CMouseEventT C.cef_mouse_event_t

func NewCMouseEventT() *CMouseEventT {
	s := &CMouseEventT{}
	return s
}

func (st *CMouseEventT) X() int {
	return int(st.x)
}

func (st *CMouseEventT) SetX(v int) {
	st.x = (C.int)(v)
}

func (st *CMouseEventT) Y() int {
	return int(st.y)
}

func (st *CMouseEventT) SetY(v int) {
	st.y = (C.int)(v)
}

func (st *CMouseEventT) Modifiers() uint32 {
	return uint32(st.modifiers)
}

func (st *CMouseEventT) SetModifiers(v uint32) {
	st.modifiers = (C.uint32)(v)
}

///
// Touch points states types.
///
type CTouchEventTypeT C.cef_touch_event_type_t

const (
	CefTetReleased  CTouchEventTypeT = C.CEF_TET_RELEASED
	CefTetPressed   CTouchEventTypeT = C.CEF_TET_PRESSED
	CefTetMoved     CTouchEventTypeT = C.CEF_TET_MOVED
	CefTetCancelled CTouchEventTypeT = C.CEF_TET_CANCELLED
)

///
// The device type that caused the event.
///
type CPointerTypeT C.cef_pointer_type_t

const (
	CefPointerTypeTouch   CPointerTypeT = C.CEF_POINTER_TYPE_TOUCH
	CefPointerTypeMouse   CPointerTypeT = C.CEF_POINTER_TYPE_MOUSE
	CefPointerTypePen     CPointerTypeT = C.CEF_POINTER_TYPE_PEN
	CefPointerTypeEraser  CPointerTypeT = C.CEF_POINTER_TYPE_ERASER
	CefPointerTypeUnknown CPointerTypeT = C.CEF_POINTER_TYPE_UNKNOWN
)

///
// Structure representing touch event information.
///
type CTouchEventT C.cef_touch_event_t

func NewCTouchEventT() *CTouchEventT {
	s := &CTouchEventT{}
	return s
}

func (st *CTouchEventT) Id() int {
	return int(st.id)
}

func (st *CTouchEventT) SetId(v int) {
	st.id = (C.int)(v)
}

func (st *CTouchEventT) X() float32 {
	return float32(st.x)
}

func (st *CTouchEventT) SetX(v float32) {
	st.x = (C.float)(v)
}

func (st *CTouchEventT) Y() float32 {
	return float32(st.y)
}

func (st *CTouchEventT) SetY(v float32) {
	st.y = (C.float)(v)
}

func (st *CTouchEventT) RadiusX() float32 {
	return float32(st.radius_x)
}

func (st *CTouchEventT) SetRadiusX(v float32) {
	st.radius_x = (C.float)(v)
}

func (st *CTouchEventT) RadiusY() float32 {
	return float32(st.radius_y)
}

func (st *CTouchEventT) SetRadiusY(v float32) {
	st.radius_y = (C.float)(v)
}

func (st *CTouchEventT) RotationAngle() float32 {
	return float32(st.rotation_angle)
}

func (st *CTouchEventT) SetRotationAngle(v float32) {
	st.rotation_angle = (C.float)(v)
}

func (st *CTouchEventT) Pressure() float32 {
	return float32(st.pressure)
}

func (st *CTouchEventT) SetPressure(v float32) {
	st.pressure = (C.float)(v)
}

func (st *CTouchEventT) Type() CTouchEventTypeT {
	return CTouchEventTypeT(st._type)
}

func (st *CTouchEventT) SetType(v CTouchEventTypeT) {
	st._type = (C.cef_touch_event_type_t)(v)
}

func (st *CTouchEventT) Modifiers() uint32 {
	return uint32(st.modifiers)
}

func (st *CTouchEventT) SetModifiers(v uint32) {
	st.modifiers = (C.uint32)(v)
}

func (st *CTouchEventT) PointerType() CPointerTypeT {
	return CPointerTypeT(st.pointer_type)
}

func (st *CTouchEventT) SetPointerType(v CPointerTypeT) {
	st.pointer_type = (C.cef_pointer_type_t)(v)
}

///
// Paint element types.
///
type CPaintElementTypeT C.cef_paint_element_type_t

const (
	PetView  CPaintElementTypeT = C.PET_VIEW
	PetPopup CPaintElementTypeT = C.PET_POPUP
)

///
// Supported event bit flags.
///
type CEventFlagsT C.cef_event_flags_t

const (
	EventflagNone              CEventFlagsT = C.EVENTFLAG_NONE
	EventflagCapsLockOn        CEventFlagsT = C.EVENTFLAG_CAPS_LOCK_ON
	EventflagShiftDown         CEventFlagsT = C.EVENTFLAG_SHIFT_DOWN
	EventflagControlDown       CEventFlagsT = C.EVENTFLAG_CONTROL_DOWN
	EventflagAltDown           CEventFlagsT = C.EVENTFLAG_ALT_DOWN
	EventflagLeftMouseButton   CEventFlagsT = C.EVENTFLAG_LEFT_MOUSE_BUTTON
	EventflagMiddleMouseButton CEventFlagsT = C.EVENTFLAG_MIDDLE_MOUSE_BUTTON
	EventflagRightMouseButton  CEventFlagsT = C.EVENTFLAG_RIGHT_MOUSE_BUTTON

	// Mac OS-X command key.
	EventflagCommandDown CEventFlagsT = C.EVENTFLAG_COMMAND_DOWN
	EventflagNumLockOn   CEventFlagsT = C.EVENTFLAG_NUM_LOCK_ON
	EventflagIsKeyPad    CEventFlagsT = C.EVENTFLAG_IS_KEY_PAD
	EventflagIsLeft      CEventFlagsT = C.EVENTFLAG_IS_LEFT
	EventflagIsRight     CEventFlagsT = C.EVENTFLAG_IS_RIGHT
	EventflagAltgrDown   CEventFlagsT = C.EVENTFLAG_ALTGR_DOWN
)

///
// Supported menu item types.
///
type CMenuItemTypeT C.cef_menu_item_type_t

const (
	MenuitemtypeNone      CMenuItemTypeT = C.MENUITEMTYPE_NONE
	MenuitemtypeCommand   CMenuItemTypeT = C.MENUITEMTYPE_COMMAND
	MenuitemtypeCheck     CMenuItemTypeT = C.MENUITEMTYPE_CHECK
	MenuitemtypeRadio     CMenuItemTypeT = C.MENUITEMTYPE_RADIO
	MenuitemtypeSeparator CMenuItemTypeT = C.MENUITEMTYPE_SEPARATOR
	MenuitemtypeSubmenu   CMenuItemTypeT = C.MENUITEMTYPE_SUBMENU
)

///
// Supported context menu type flags.
///
type CContextMenuTypeFlagsT C.cef_context_menu_type_flags_t

const (

	///
	// No node is selected.
	///
	CmTypeflagNone CContextMenuTypeFlagsT = C.CM_TYPEFLAG_NONE

	///
	// The top page is selected.
	///
	CmTypeflagPage CContextMenuTypeFlagsT = C.CM_TYPEFLAG_PAGE

	///
	// A subframe page is selected.
	///
	CmTypeflagFrame CContextMenuTypeFlagsT = C.CM_TYPEFLAG_FRAME

	///
	// A link is selected.
	///
	CmTypeflagLink CContextMenuTypeFlagsT = C.CM_TYPEFLAG_LINK

	///
	// A media node is selected.
	///
	CmTypeflagMedia CContextMenuTypeFlagsT = C.CM_TYPEFLAG_MEDIA

	///
	// There is a textual or mixed selection that is selected.
	///
	CmTypeflagSelection CContextMenuTypeFlagsT = C.CM_TYPEFLAG_SELECTION

	///
	// An editable element is selected.
	///
	CmTypeflagEditable CContextMenuTypeFlagsT = C.CM_TYPEFLAG_EDITABLE
)

///
// Supported context menu media types.
///
type CContextMenuMediaTypeT C.cef_context_menu_media_type_t

const (

	///
	// No special node is in context.
	///
	CmMediatypeNone CContextMenuMediaTypeT = C.CM_MEDIATYPE_NONE

	///
	// An image node is selected.
	///
	CmMediatypeImage CContextMenuMediaTypeT = C.CM_MEDIATYPE_IMAGE

	///
	// A video node is selected.
	///
	CmMediatypeVideo CContextMenuMediaTypeT = C.CM_MEDIATYPE_VIDEO

	///
	// An audio node is selected.
	///
	CmMediatypeAudio CContextMenuMediaTypeT = C.CM_MEDIATYPE_AUDIO

	///
	// A file node is selected.
	///
	CmMediatypeFile CContextMenuMediaTypeT = C.CM_MEDIATYPE_FILE

	///
	// A plugin node is selected.
	///
	CmMediatypePlugin CContextMenuMediaTypeT = C.CM_MEDIATYPE_PLUGIN
)

///
// Supported context menu media state bit flags.
///
type CContextMenuMediaStateFlagsT C.cef_context_menu_media_state_flags_t

const (
	CmMediaflagNone               CContextMenuMediaStateFlagsT = C.CM_MEDIAFLAG_NONE
	CmMediaflagError              CContextMenuMediaStateFlagsT = C.CM_MEDIAFLAG_ERROR
	CmMediaflagPaused             CContextMenuMediaStateFlagsT = C.CM_MEDIAFLAG_PAUSED
	CmMediaflagMuted              CContextMenuMediaStateFlagsT = C.CM_MEDIAFLAG_MUTED
	CmMediaflagLoop               CContextMenuMediaStateFlagsT = C.CM_MEDIAFLAG_LOOP
	CmMediaflagCanSave            CContextMenuMediaStateFlagsT = C.CM_MEDIAFLAG_CAN_SAVE
	CmMediaflagHasAudio           CContextMenuMediaStateFlagsT = C.CM_MEDIAFLAG_HAS_AUDIO
	CmMediaflagHasVideo           CContextMenuMediaStateFlagsT = C.CM_MEDIAFLAG_HAS_VIDEO
	CmMediaflagControlRootElement CContextMenuMediaStateFlagsT = C.CM_MEDIAFLAG_CONTROL_ROOT_ELEMENT
	CmMediaflagCanPrint           CContextMenuMediaStateFlagsT = C.CM_MEDIAFLAG_CAN_PRINT
	CmMediaflagCanRotate          CContextMenuMediaStateFlagsT = C.CM_MEDIAFLAG_CAN_ROTATE
)

///
// Supported context menu edit state bit flags.
///
type CContextMenuEditStateFlagsT C.cef_context_menu_edit_state_flags_t

const (
	CmEditflagNone         CContextMenuEditStateFlagsT = C.CM_EDITFLAG_NONE
	CmEditflagCanUndo      CContextMenuEditStateFlagsT = C.CM_EDITFLAG_CAN_UNDO
	CmEditflagCanRedo      CContextMenuEditStateFlagsT = C.CM_EDITFLAG_CAN_REDO
	CmEditflagCanCut       CContextMenuEditStateFlagsT = C.CM_EDITFLAG_CAN_CUT
	CmEditflagCanCopy      CContextMenuEditStateFlagsT = C.CM_EDITFLAG_CAN_COPY
	CmEditflagCanPaste     CContextMenuEditStateFlagsT = C.CM_EDITFLAG_CAN_PASTE
	CmEditflagCanDelete    CContextMenuEditStateFlagsT = C.CM_EDITFLAG_CAN_DELETE
	CmEditflagCanSelectAll CContextMenuEditStateFlagsT = C.CM_EDITFLAG_CAN_SELECT_ALL
	CmEditflagCanTranslate CContextMenuEditStateFlagsT = C.CM_EDITFLAG_CAN_TRANSLATE
)

///
// Key event types.
///
type CKeyEventTypeT C.cef_key_event_type_t

const (

	///
	// Notification that a key transitioned from "up" to "down".
	///
	KeyeventRawkeydown CKeyEventTypeT = C.KEYEVENT_RAWKEYDOWN

	///
	// Notification that a key was pressed. This does not necessarily correspond
	// to a character depending on the key and language. Use KEYEVENT_CHAR for
	// character input.
	///
	KeyeventKeydown CKeyEventTypeT = C.KEYEVENT_KEYDOWN

	///
	// Notification that a key was released.
	///
	KeyeventKeyup CKeyEventTypeT = C.KEYEVENT_KEYUP

	///
	// Notification that a character was typed. Use this for text input. Key
	// down events may generate 0, 1, or more than one character event depending
	// on the key, locale, and operating system.
	///
	KeyeventChar CKeyEventTypeT = C.KEYEVENT_CHAR
)

///
// Structure representing keyboard event information.
///
type CKeyEventT C.cef_key_event_t

func NewCKeyEventT() *CKeyEventT {
	s := &CKeyEventT{}
	return s
}

func (st *CKeyEventT) Type() CKeyEventTypeT {
	return CKeyEventTypeT(st._type)
}

func (st *CKeyEventT) SetType(v CKeyEventTypeT) {
	st._type = (C.cef_key_event_type_t)(v)
}

func (st *CKeyEventT) Modifiers() uint32 {
	return uint32(st.modifiers)
}

func (st *CKeyEventT) SetModifiers(v uint32) {
	st.modifiers = (C.uint32)(v)
}

func (st *CKeyEventT) WindowsKeyCode() int {
	return int(st.windows_key_code)
}

func (st *CKeyEventT) SetWindowsKeyCode(v int) {
	st.windows_key_code = (C.int)(v)
}

func (st *CKeyEventT) NativeKeyCode() int {
	return int(st.native_key_code)
}

func (st *CKeyEventT) SetNativeKeyCode(v int) {
	st.native_key_code = (C.int)(v)
}

func (st *CKeyEventT) IsSystemKey() int {
	return int(st.is_system_key)
}

func (st *CKeyEventT) SetIsSystemKey(v int) {
	st.is_system_key = (C.int)(v)
}

func (st *CKeyEventT) Character() uint16 {
	return uint16(st.character)
}

func (st *CKeyEventT) SetCharacter(v uint16) {
	st.character = (C.char16)(v)
}

func (st *CKeyEventT) UnmodifiedCharacter() uint16 {
	return uint16(st.unmodified_character)
}

func (st *CKeyEventT) SetUnmodifiedCharacter(v uint16) {
	st.unmodified_character = (C.char16)(v)
}

func (st *CKeyEventT) FocusOnEditableField() int {
	return int(st.focus_on_editable_field)
}

func (st *CKeyEventT) SetFocusOnEditableField(v int) {
	st.focus_on_editable_field = (C.int)(v)
}

///
// Focus sources.
///
type CFocusSourceT C.cef_focus_source_t

const (

	///
	// The source is explicit navigation via the API (LoadURL(), etc).
	///
	FocusSourceNavigation CFocusSourceT = C.FOCUS_SOURCE_NAVIGATION

	///
	// The source is a system-generated focus event.
	///
	FocusSourceSystem CFocusSourceT = C.FOCUS_SOURCE_SYSTEM
)

///
// Navigation types.
///
type CNavigationTypeT C.cef_navigation_type_t

const (
	NavigationLinkClicked     CNavigationTypeT = C.NAVIGATION_LINK_CLICKED
	NavigationFormSubmitted   CNavigationTypeT = C.NAVIGATION_FORM_SUBMITTED
	NavigationBackForward     CNavigationTypeT = C.NAVIGATION_BACK_FORWARD
	NavigationReload          CNavigationTypeT = C.NAVIGATION_RELOAD
	NavigationFormResubmitted CNavigationTypeT = C.NAVIGATION_FORM_RESUBMITTED
	NavigationOther           CNavigationTypeT = C.NAVIGATION_OTHER
)

///
// Supported XML encoding types. The parser supports ASCII, ISO-8859-1, and
// UTF16 (LE and BE) by default. All other types must be translated to UTF8
// before being passed to the parser. If a BOM is detected and the correct
// decoder is available then that decoder will be used automatically.
///
type CXmlEncodingTypeT C.cef_xml_encoding_type_t

const (
	XmlEncodingNone    CXmlEncodingTypeT = C.XML_ENCODING_NONE
	XmlEncodingUtf8    CXmlEncodingTypeT = C.XML_ENCODING_UTF8
	XmlEncodingUtf16le CXmlEncodingTypeT = C.XML_ENCODING_UTF16LE
	XmlEncodingUtf16be CXmlEncodingTypeT = C.XML_ENCODING_UTF16BE
	XmlEncodingAscii   CXmlEncodingTypeT = C.XML_ENCODING_ASCII
)

///
// XML node types.
///
type CXmlNodeTypeT C.cef_xml_node_type_t

const (
	XmlNodeUnsupported           CXmlNodeTypeT = C.XML_NODE_UNSUPPORTED
	XmlNodeProcessingInstruction CXmlNodeTypeT = C.XML_NODE_PROCESSING_INSTRUCTION
	XmlNodeDocumentType          CXmlNodeTypeT = C.XML_NODE_DOCUMENT_TYPE
	XmlNodeElementStart          CXmlNodeTypeT = C.XML_NODE_ELEMENT_START
	XmlNodeElementEnd            CXmlNodeTypeT = C.XML_NODE_ELEMENT_END
	XmlNodeAttribute             CXmlNodeTypeT = C.XML_NODE_ATTRIBUTE
	XmlNodeText                  CXmlNodeTypeT = C.XML_NODE_TEXT
	XmlNodeCdata                 CXmlNodeTypeT = C.XML_NODE_CDATA
	XmlNodeEntityReference       CXmlNodeTypeT = C.XML_NODE_ENTITY_REFERENCE
	XmlNodeWhitespace            CXmlNodeTypeT = C.XML_NODE_WHITESPACE
	XmlNodeComment               CXmlNodeTypeT = C.XML_NODE_COMMENT
)

///
// Popup window features.
///
type CPopupFeaturesT C.cef_popup_features_t

func NewCPopupFeaturesT() *CPopupFeaturesT {
	s := &CPopupFeaturesT{}
	return s
}

func (st *CPopupFeaturesT) X() int {
	return int(st.x)
}

func (st *CPopupFeaturesT) SetX(v int) {
	st.x = (C.int)(v)
}

func (st *CPopupFeaturesT) XSet() bool {
	return st.xSet != 0
}

func (st *CPopupFeaturesT) SetXSet(v bool) {
	if v {
		st.xSet = 1
	} else {
		st.xSet = 0
	}
}

func (st *CPopupFeaturesT) Y() int {
	return int(st.y)
}

func (st *CPopupFeaturesT) SetY(v int) {
	st.y = (C.int)(v)
}

func (st *CPopupFeaturesT) YSet() bool {
	return st.ySet != 0
}

func (st *CPopupFeaturesT) SetYSet(v bool) {
	if v {
		st.ySet = 1
	} else {
		st.ySet = 0
	}
}

func (st *CPopupFeaturesT) Width() int {
	return int(st.width)
}

func (st *CPopupFeaturesT) SetWidth(v int) {
	st.width = (C.int)(v)
}

func (st *CPopupFeaturesT) WidthSet() bool {
	return st.widthSet != 0
}

func (st *CPopupFeaturesT) SetWidthSet(v bool) {
	if v {
		st.widthSet = 1
	} else {
		st.widthSet = 0
	}
}

func (st *CPopupFeaturesT) Height() int {
	return int(st.height)
}

func (st *CPopupFeaturesT) SetHeight(v int) {
	st.height = (C.int)(v)
}

func (st *CPopupFeaturesT) HeightSet() bool {
	return st.heightSet != 0
}

func (st *CPopupFeaturesT) SetHeightSet(v bool) {
	if v {
		st.heightSet = 1
	} else {
		st.heightSet = 0
	}
}

func (st *CPopupFeaturesT) MenuBarVisible() int {
	return int(st.menuBarVisible)
}

func (st *CPopupFeaturesT) SetMenuBarVisible(v int) {
	st.menuBarVisible = (C.int)(v)
}

func (st *CPopupFeaturesT) StatusBarVisible() int {
	return int(st.statusBarVisible)
}

func (st *CPopupFeaturesT) SetStatusBarVisible(v int) {
	st.statusBarVisible = (C.int)(v)
}

func (st *CPopupFeaturesT) ToolBarVisible() int {
	return int(st.toolBarVisible)
}

func (st *CPopupFeaturesT) SetToolBarVisible(v int) {
	st.toolBarVisible = (C.int)(v)
}

func (st *CPopupFeaturesT) ScrollbarsVisible() int {
	return int(st.scrollbarsVisible)
}

func (st *CPopupFeaturesT) SetScrollbarsVisible(v int) {
	st.scrollbarsVisible = (C.int)(v)
}

///
// DOM document types.
///
type CDomDocumentTypeT C.cef_dom_document_type_t

const (
	DomDocumentTypeUnknown CDomDocumentTypeT = C.DOM_DOCUMENT_TYPE_UNKNOWN
	DomDocumentTypeHtml    CDomDocumentTypeT = C.DOM_DOCUMENT_TYPE_HTML
	DomDocumentTypeXhtml   CDomDocumentTypeT = C.DOM_DOCUMENT_TYPE_XHTML
	DomDocumentTypePlugin  CDomDocumentTypeT = C.DOM_DOCUMENT_TYPE_PLUGIN
)

///
// DOM event category flags.
///
type CDomEventCategoryT C.cef_dom_event_category_t

const (
	DomEventCategoryUnknown                CDomEventCategoryT = C.DOM_EVENT_CATEGORY_UNKNOWN
	DomEventCategoryUi                     CDomEventCategoryT = C.DOM_EVENT_CATEGORY_UI
	DomEventCategoryMouse                  CDomEventCategoryT = C.DOM_EVENT_CATEGORY_MOUSE
	DomEventCategoryMutation               CDomEventCategoryT = C.DOM_EVENT_CATEGORY_MUTATION
	DomEventCategoryKeyboard               CDomEventCategoryT = C.DOM_EVENT_CATEGORY_KEYBOARD
	DomEventCategoryText                   CDomEventCategoryT = C.DOM_EVENT_CATEGORY_TEXT
	DomEventCategoryComposition            CDomEventCategoryT = C.DOM_EVENT_CATEGORY_COMPOSITION
	DomEventCategoryDrag                   CDomEventCategoryT = C.DOM_EVENT_CATEGORY_DRAG
	DomEventCategoryClipboard              CDomEventCategoryT = C.DOM_EVENT_CATEGORY_CLIPBOARD
	DomEventCategoryMessage                CDomEventCategoryT = C.DOM_EVENT_CATEGORY_MESSAGE
	DomEventCategoryWheel                  CDomEventCategoryT = C.DOM_EVENT_CATEGORY_WHEEL
	DomEventCategoryBeforeTextInserted     CDomEventCategoryT = C.DOM_EVENT_CATEGORY_BEFORE_TEXT_INSERTED
	DomEventCategoryOverflow               CDomEventCategoryT = C.DOM_EVENT_CATEGORY_OVERFLOW
	DomEventCategoryPageTransition         CDomEventCategoryT = C.DOM_EVENT_CATEGORY_PAGE_TRANSITION
	DomEventCategoryPopstate               CDomEventCategoryT = C.DOM_EVENT_CATEGORY_POPSTATE
	DomEventCategoryProgress               CDomEventCategoryT = C.DOM_EVENT_CATEGORY_PROGRESS
	DomEventCategoryXmlhttprequestProgress CDomEventCategoryT = C.DOM_EVENT_CATEGORY_XMLHTTPREQUEST_PROGRESS
)

///
// DOM event processing phases.
///
type CDomEventPhaseT C.cef_dom_event_phase_t

const (
	DomEventPhaseUnknown   CDomEventPhaseT = C.DOM_EVENT_PHASE_UNKNOWN
	DomEventPhaseCapturing CDomEventPhaseT = C.DOM_EVENT_PHASE_CAPTURING
	DomEventPhaseAtTarget  CDomEventPhaseT = C.DOM_EVENT_PHASE_AT_TARGET
	DomEventPhaseBubbling  CDomEventPhaseT = C.DOM_EVENT_PHASE_BUBBLING
)

///
// DOM node types.
///
type CDomNodeTypeT C.cef_dom_node_type_t

const (
	DomNodeTypeUnsupported            CDomNodeTypeT = C.DOM_NODE_TYPE_UNSUPPORTED
	DomNodeTypeElement                CDomNodeTypeT = C.DOM_NODE_TYPE_ELEMENT
	DomNodeTypeAttribute              CDomNodeTypeT = C.DOM_NODE_TYPE_ATTRIBUTE
	DomNodeTypeText                   CDomNodeTypeT = C.DOM_NODE_TYPE_TEXT
	DomNodeTypeCdataSection           CDomNodeTypeT = C.DOM_NODE_TYPE_CDATA_SECTION
	DomNodeTypeProcessingInstructions CDomNodeTypeT = C.DOM_NODE_TYPE_PROCESSING_INSTRUCTIONS
	DomNodeTypeComment                CDomNodeTypeT = C.DOM_NODE_TYPE_COMMENT
	DomNodeTypeDocument               CDomNodeTypeT = C.DOM_NODE_TYPE_DOCUMENT
	DomNodeTypeDocumentType           CDomNodeTypeT = C.DOM_NODE_TYPE_DOCUMENT_TYPE
	DomNodeTypeDocumentFragment       CDomNodeTypeT = C.DOM_NODE_TYPE_DOCUMENT_FRAGMENT
)

///
// Supported file dialog modes.
///
type CFileDialogModeT C.cef_file_dialog_mode_t

const (

	///
	// Requires that the file exists before allowing the user to pick it.
	///
	FileDialogOpen CFileDialogModeT = C.FILE_DIALOG_OPEN

	///
	// Like Open, but allows picking multiple files to open.
	///
	FileDialogOpenMultiple CFileDialogModeT = C.FILE_DIALOG_OPEN_MULTIPLE

	///
	// Like Open, but selects a folder to open.
	///
	FileDialogOpenFolder CFileDialogModeT = C.FILE_DIALOG_OPEN_FOLDER

	///
	// Allows picking a nonexistent file, and prompts to overwrite if the file
	// already exists.
	///
	FileDialogSave CFileDialogModeT = C.FILE_DIALOG_SAVE

	///
	// General mask defining the bits used for the type values.
	///
	FileDialogTypeMask CFileDialogModeT = C.FILE_DIALOG_TYPE_MASK

	///
	// Prompt to overwrite if the user selects an existing file with the Save
	// dialog.
	///
	FileDialogOverwritepromptFlag CFileDialogModeT = C.FILE_DIALOG_OVERWRITEPROMPT_FLAG

	///
	// Do not display read-only files.
	///
	FileDialogHidereadonlyFlag CFileDialogModeT = C.FILE_DIALOG_HIDEREADONLY_FLAG
)

///
// Print job color mode values.
///
type CColorModelT C.cef_color_model_t

const (
	ColorModelUnknown                    CColorModelT = C.COLOR_MODEL_UNKNOWN
	ColorModelGray                       CColorModelT = C.COLOR_MODEL_GRAY
	ColorModelColor                      CColorModelT = C.COLOR_MODEL_COLOR
	ColorModelCmyk                       CColorModelT = C.COLOR_MODEL_CMYK
	ColorModelCmy                        CColorModelT = C.COLOR_MODEL_CMY
	ColorModelKcmy                       CColorModelT = C.COLOR_MODEL_KCMY
	ColorModelCmyK                       CColorModelT = C.COLOR_MODEL_CMY_K
	ColorModelBlack                      CColorModelT = C.COLOR_MODEL_BLACK
	ColorModelGrayscale                  CColorModelT = C.COLOR_MODEL_GRAYSCALE
	ColorModelRgb                        CColorModelT = C.COLOR_MODEL_RGB
	ColorModelRgb16                      CColorModelT = C.COLOR_MODEL_RGB16
	ColorModelRgba                       CColorModelT = C.COLOR_MODEL_RGBA
	ColorModelColormodeColor             CColorModelT = C.COLOR_MODEL_COLORMODE_COLOR
	ColorModelColormodeMonochrome        CColorModelT = C.COLOR_MODEL_COLORMODE_MONOCHROME
	ColorModelHpColorColor               CColorModelT = C.COLOR_MODEL_HP_COLOR_COLOR
	ColorModelHpColorBlack               CColorModelT = C.COLOR_MODEL_HP_COLOR_BLACK
	ColorModelPrintoutmodeNormal         CColorModelT = C.COLOR_MODEL_PRINTOUTMODE_NORMAL
	ColorModelPrintoutmodeNormalGray     CColorModelT = C.COLOR_MODEL_PRINTOUTMODE_NORMAL_GRAY
	ColorModelProcesscolormodelCmyk      CColorModelT = C.COLOR_MODEL_PROCESSCOLORMODEL_CMYK
	ColorModelProcesscolormodelGreyscale CColorModelT = C.COLOR_MODEL_PROCESSCOLORMODEL_GREYSCALE
	ColorModelProcesscolormodelRgb       CColorModelT = C.COLOR_MODEL_PROCESSCOLORMODEL_RGB
)

///
// Print job duplex mode values.
///
type CDuplexModeT C.cef_duplex_mode_t

const (
	DuplexModeUnknown   CDuplexModeT = C.DUPLEX_MODE_UNKNOWN
	DuplexModeSimplex   CDuplexModeT = C.DUPLEX_MODE_SIMPLEX
	DuplexModeLongEdge  CDuplexModeT = C.DUPLEX_MODE_LONG_EDGE
	DuplexModeShortEdge CDuplexModeT = C.DUPLEX_MODE_SHORT_EDGE
)

///
// Cursor type values.
///
type CCursorTypeT C.cef_cursor_type_t

const (
	CtPointer                  CCursorTypeT = C.CT_POINTER
	CtCross                    CCursorTypeT = C.CT_CROSS
	CtHand                     CCursorTypeT = C.CT_HAND
	CtIbeam                    CCursorTypeT = C.CT_IBEAM
	CtWait                     CCursorTypeT = C.CT_WAIT
	CtHelp                     CCursorTypeT = C.CT_HELP
	CtEastresize               CCursorTypeT = C.CT_EASTRESIZE
	CtNorthresize              CCursorTypeT = C.CT_NORTHRESIZE
	CtNortheastresize          CCursorTypeT = C.CT_NORTHEASTRESIZE
	CtNorthwestresize          CCursorTypeT = C.CT_NORTHWESTRESIZE
	CtSouthresize              CCursorTypeT = C.CT_SOUTHRESIZE
	CtSoutheastresize          CCursorTypeT = C.CT_SOUTHEASTRESIZE
	CtSouthwestresize          CCursorTypeT = C.CT_SOUTHWESTRESIZE
	CtWestresize               CCursorTypeT = C.CT_WESTRESIZE
	CtNorthsouthresize         CCursorTypeT = C.CT_NORTHSOUTHRESIZE
	CtEastwestresize           CCursorTypeT = C.CT_EASTWESTRESIZE
	CtNortheastsouthwestresize CCursorTypeT = C.CT_NORTHEASTSOUTHWESTRESIZE
	CtNorthwestsoutheastresize CCursorTypeT = C.CT_NORTHWESTSOUTHEASTRESIZE
	CtColumnresize             CCursorTypeT = C.CT_COLUMNRESIZE
	CtRowresize                CCursorTypeT = C.CT_ROWRESIZE
	CtMiddlepanning            CCursorTypeT = C.CT_MIDDLEPANNING
	CtEastpanning              CCursorTypeT = C.CT_EASTPANNING
	CtNorthpanning             CCursorTypeT = C.CT_NORTHPANNING
	CtNortheastpanning         CCursorTypeT = C.CT_NORTHEASTPANNING
	CtNorthwestpanning         CCursorTypeT = C.CT_NORTHWESTPANNING
	CtSouthpanning             CCursorTypeT = C.CT_SOUTHPANNING
	CtSoutheastpanning         CCursorTypeT = C.CT_SOUTHEASTPANNING
	CtSouthwestpanning         CCursorTypeT = C.CT_SOUTHWESTPANNING
	CtWestpanning              CCursorTypeT = C.CT_WESTPANNING
	CtMove                     CCursorTypeT = C.CT_MOVE
	CtVerticaltext             CCursorTypeT = C.CT_VERTICALTEXT
	CtCell                     CCursorTypeT = C.CT_CELL
	CtContextmenu              CCursorTypeT = C.CT_CONTEXTMENU
	CtAlias                    CCursorTypeT = C.CT_ALIAS
	CtProgress                 CCursorTypeT = C.CT_PROGRESS
	CtNodrop                   CCursorTypeT = C.CT_NODROP
	CtCopy                     CCursorTypeT = C.CT_COPY
	CtNone                     CCursorTypeT = C.CT_NONE
	CtNotallowed               CCursorTypeT = C.CT_NOTALLOWED
	CtZoomin                   CCursorTypeT = C.CT_ZOOMIN
	CtZoomout                  CCursorTypeT = C.CT_ZOOMOUT
	CtGrab                     CCursorTypeT = C.CT_GRAB
	CtGrabbing                 CCursorTypeT = C.CT_GRABBING
	CtMiddlePanningVertical    CCursorTypeT = C.CT_MIDDLE_PANNING_VERTICAL
	CtMiddlePanningHorizontal  CCursorTypeT = C.CT_MIDDLE_PANNING_HORIZONTAL
	CtCustom                   CCursorTypeT = C.CT_CUSTOM
	CtDndNone                  CCursorTypeT = C.CT_DND_NONE
	CtDndMove                  CCursorTypeT = C.CT_DND_MOVE
	CtDndCopy                  CCursorTypeT = C.CT_DND_COPY
	CtDndLink                  CCursorTypeT = C.CT_DND_LINK
)

///
// Structure representing cursor information. |buffer| will be
// |size.width|*|size.height|*4 bytes in size and represents a BGRA image with
// an upper-left origin.
///
type CCursorInfoT C.cef_cursor_info_t

func NewCCursorInfoT() *CCursorInfoT {
	s := &CCursorInfoT{}
	return s
}

func (st *CCursorInfoT) Hotspot() CPointT {
	return CPointT(st.hotspot)
}

func (st *CCursorInfoT) SetHotspot(v CPointT) {
	st.hotspot = (C.cef_point_t)(v)
}

func (st *CCursorInfoT) ImageScaleFactor() float32 {
	return float32(st.image_scale_factor)
}

func (st *CCursorInfoT) SetImageScaleFactor(v float32) {
	st.image_scale_factor = (C.float)(v)
}

func (st *CCursorInfoT) Buffer() unsafe.Pointer {
	return unsafe.Pointer(st.buffer)
}

func (st *CCursorInfoT) SetBuffer(v unsafe.Pointer) {
	st.buffer = (unsafe.Pointer)(v)
}

func (st *CCursorInfoT) Size() CSizeT {
	return CSizeT(st.size)
}

func (st *CCursorInfoT) SetSize(v CSizeT) {
	st.size = (C.cef_size_t)(v)
}

///
// URI unescape rules passed to CefURIDecode().
///
type CUriUnescapeRuleT C.cef_uri_unescape_rule_t

const (

	///
	// Don't unescape anything at all.
	///
	UuNone CUriUnescapeRuleT = C.UU_NONE

	///
	// Don't unescape anything special, but all normal unescaping will happen.
	// This is a placeholder and can't be combined with other flags (since it's
	// just the absence of them). All other unescape rules imply "normal" in
	// addition to their special meaning. Things like escaped letters, digits,
	// and most symbols will get unescaped with this mode.
	///
	UuNormal CUriUnescapeRuleT = C.UU_NORMAL

	///
	// Convert %20 to spaces. In some places where we're showing URLs, we may
	// want this. In places where the URL may be copied and pasted out, then
	// you wouldn't want this since it might not be interpreted in one piece
	// by other applications.
	///
	UuSpaces CUriUnescapeRuleT = C.UU_SPACES

	///
	// Unescapes '/' and '\\'. If these characters were unescaped, the resulting
	// URL won't be the same as the source one. Moreover, they are dangerous to
	// unescape in strings that will be used as file paths or names. This value
	// should only be used when slashes don't have special meaning, like data
	// URLs.
	///
	UuPathSeparators CUriUnescapeRuleT = C.UU_PATH_SEPARATORS

	///
	// Unescapes various characters that will change the meaning of URLs,
	// including '%', '+', '&', '#'. Does not unescape path separators.
	// If these characters were unescaped, the resulting URL won't be the same
	// as the source one. This flag is used when generating final output like
	// filenames for URLs where we won't be interpreting as a URL and want to do
	// as much unescaping as possible.
	///
	UuUrlSpecialCharsExceptPathSeparators CUriUnescapeRuleT = C.UU_URL_SPECIAL_CHARS_EXCEPT_PATH_SEPARATORS

	///
	// URL queries use "+" for space. This flag controls that replacement.
	///
	UuReplacePlusWithSpace CUriUnescapeRuleT = C.UU_REPLACE_PLUS_WITH_SPACE
)

///
// Options that can be passed to CefParseJSON.
///
type CJsonParserOptionsT C.cef_json_parser_options_t

const (

	///
	// Parses the input strictly according to RFC 4627. See comments in Chromium's
	// base/json/json_reader.h file for known limitations/deviations from the RFC.
	///
	JsonParserRfc CJsonParserOptionsT = C.JSON_PARSER_RFC

	///
	// Allows commas to exist after the last element in structures.
	///
	JsonParserAllowTrailingCommas CJsonParserOptionsT = C.JSON_PARSER_ALLOW_TRAILING_COMMAS
)

///
// Error codes that can be returned from CefParseJSONAndReturnError.
///
type CJsonParserErrorT C.cef_json_parser_error_t

const (
	JsonNoError                 CJsonParserErrorT = C.JSON_NO_ERROR
	JsonInvalidEscape           CJsonParserErrorT = C.JSON_INVALID_ESCAPE
	JsonSyntaxError             CJsonParserErrorT = C.JSON_SYNTAX_ERROR
	JsonUnexpectedToken         CJsonParserErrorT = C.JSON_UNEXPECTED_TOKEN
	JsonTrailingComma           CJsonParserErrorT = C.JSON_TRAILING_COMMA
	JsonTooMuchNesting          CJsonParserErrorT = C.JSON_TOO_MUCH_NESTING
	JsonUnexpectedDataAfterRoot CJsonParserErrorT = C.JSON_UNEXPECTED_DATA_AFTER_ROOT
	JsonUnsupportedEncoding     CJsonParserErrorT = C.JSON_UNSUPPORTED_ENCODING
	JsonUnquotedDictionaryKey   CJsonParserErrorT = C.JSON_UNQUOTED_DICTIONARY_KEY
	JsonParseErrorCount         CJsonParserErrorT = C.JSON_PARSE_ERROR_COUNT
)

///
// Options that can be passed to CefWriteJSON.
///
type CJsonWriterOptionsT C.cef_json_writer_options_t

const (

	///
	// Default behavior.
	///
	JsonWriterDefault CJsonWriterOptionsT = C.JSON_WRITER_DEFAULT

	///
	// This option instructs the writer that if a Binary value is encountered,
	// the value (and key if within a dictionary) will be omitted from the
	// output, and success will be returned. Otherwise, if a binary value is
	// encountered, failure will be returned.
	///
	JsonWriterOmitBinaryValues CJsonWriterOptionsT = C.JSON_WRITER_OMIT_BINARY_VALUES

	///
	// This option instructs the writer to write doubles that have no fractional
	// part as a normal integer (i.e., without using exponential notation
	// or appending a '.0') as long as the value is within the range of a
	// 64-bit int.
	///
	JsonWriterOmitDoubleTypePreservation CJsonWriterOptionsT = C.JSON_WRITER_OMIT_DOUBLE_TYPE_PRESERVATION

	///
	// Return a slightly nicer formatted json string (pads with whitespace to
	// help with readability).
	///
	JsonWriterPrettyPrint CJsonWriterOptionsT = C.JSON_WRITER_PRETTY_PRINT
)

///
// Margin type for PDF printing.
///
type CPdfPrintMarginTypeT C.cef_pdf_print_margin_type_t

const (

	///
	// Default margins.
	///
	PdfPrintMarginDefault CPdfPrintMarginTypeT = C.PDF_PRINT_MARGIN_DEFAULT

	///
	// No margins.
	///
	PdfPrintMarginNone CPdfPrintMarginTypeT = C.PDF_PRINT_MARGIN_NONE

	///
	// Minimum margins.
	///
	PdfPrintMarginMinimum CPdfPrintMarginTypeT = C.PDF_PRINT_MARGIN_MINIMUM

	///
	// Custom margins using the |margin_*| values from cef_pdf_print_settings_t.
	///
	PdfPrintMarginCustom CPdfPrintMarginTypeT = C.PDF_PRINT_MARGIN_CUSTOM
)

///
// Structure representing PDF print settings.
///
type CPdfPrintSettingsT C.cef_pdf_print_settings_t

func NewCPdfPrintSettingsT() *CPdfPrintSettingsT {
	s := &CPdfPrintSettingsT{}
	return s
}

func (st *CPdfPrintSettingsT) HeaderFooterTitle() string {
	return string_from_cef_string(&st.header_footer_title)
}

func (st *CPdfPrintSettingsT) SetHeaderFooterTitle(v string) {
	set_cef_string(&st.header_footer_title, v)
}

func (st *CPdfPrintSettingsT) HeaderFooterUrl() string {
	return string_from_cef_string(&st.header_footer_url)
}

func (st *CPdfPrintSettingsT) SetHeaderFooterUrl(v string) {
	set_cef_string(&st.header_footer_url, v)
}

func (st *CPdfPrintSettingsT) PageWidth() int {
	return int(st.page_width)
}

func (st *CPdfPrintSettingsT) SetPageWidth(v int) {
	st.page_width = (C.int)(v)
}

func (st *CPdfPrintSettingsT) PageHeight() int {
	return int(st.page_height)
}

func (st *CPdfPrintSettingsT) SetPageHeight(v int) {
	st.page_height = (C.int)(v)
}

func (st *CPdfPrintSettingsT) ScaleFactor() int {
	return int(st.scale_factor)
}

func (st *CPdfPrintSettingsT) SetScaleFactor(v int) {
	st.scale_factor = (C.int)(v)
}

func (st *CPdfPrintSettingsT) MarginTop() int {
	return int(st.margin_top)
}

func (st *CPdfPrintSettingsT) SetMarginTop(v int) {
	st.margin_top = (C.int)(v)
}

func (st *CPdfPrintSettingsT) MarginRight() int {
	return int(st.margin_right)
}

func (st *CPdfPrintSettingsT) SetMarginRight(v int) {
	st.margin_right = (C.int)(v)
}

func (st *CPdfPrintSettingsT) MarginBottom() int {
	return int(st.margin_bottom)
}

func (st *CPdfPrintSettingsT) SetMarginBottom(v int) {
	st.margin_bottom = (C.int)(v)
}

func (st *CPdfPrintSettingsT) MarginLeft() int {
	return int(st.margin_left)
}

func (st *CPdfPrintSettingsT) SetMarginLeft(v int) {
	st.margin_left = (C.int)(v)
}

func (st *CPdfPrintSettingsT) MarginType() CPdfPrintMarginTypeT {
	return CPdfPrintMarginTypeT(st.margin_type)
}

func (st *CPdfPrintSettingsT) SetMarginType(v CPdfPrintMarginTypeT) {
	st.margin_type = (C.cef_pdf_print_margin_type_t)(v)
}

func (st *CPdfPrintSettingsT) HeaderFooterEnabled() bool {
	return st.header_footer_enabled != 0
}

func (st *CPdfPrintSettingsT) SetHeaderFooterEnabled(v bool) {
	if v {
		st.header_footer_enabled = 1
	} else {
		st.header_footer_enabled = 0
	}
}

func (st *CPdfPrintSettingsT) SelectionOnly() bool {
	return st.selection_only != 0
}

func (st *CPdfPrintSettingsT) SetSelectionOnly(v bool) {
	if v {
		st.selection_only = 1
	} else {
		st.selection_only = 0
	}
}

func (st *CPdfPrintSettingsT) Landscape() bool {
	return st.landscape != 0
}

func (st *CPdfPrintSettingsT) SetLandscape(v bool) {
	if v {
		st.landscape = 1
	} else {
		st.landscape = 0
	}
}

func (st *CPdfPrintSettingsT) BackgroundsEnabled() bool {
	return st.backgrounds_enabled != 0
}

func (st *CPdfPrintSettingsT) SetBackgroundsEnabled(v bool) {
	if v {
		st.backgrounds_enabled = 1
	} else {
		st.backgrounds_enabled = 0
	}
}

///
// Supported UI scale factors for the platform. SCALE_FACTOR_NONE is used for
// density independent resources such as string, html/js files or an image that
// can be used for any scale factors (such as wallpapers).
///
type CScaleFactorT C.cef_scale_factor_t

const (
	ScaleFactorNone CScaleFactorT = C.SCALE_FACTOR_NONE
	ScaleFactor100p CScaleFactorT = C.SCALE_FACTOR_100P
	ScaleFactor125p CScaleFactorT = C.SCALE_FACTOR_125P
	ScaleFactor133p CScaleFactorT = C.SCALE_FACTOR_133P
	ScaleFactor140p CScaleFactorT = C.SCALE_FACTOR_140P
	ScaleFactor150p CScaleFactorT = C.SCALE_FACTOR_150P
	ScaleFactor180p CScaleFactorT = C.SCALE_FACTOR_180P
	ScaleFactor200p CScaleFactorT = C.SCALE_FACTOR_200P
	ScaleFactor250p CScaleFactorT = C.SCALE_FACTOR_250P
	ScaleFactor300p CScaleFactorT = C.SCALE_FACTOR_300P
)

///
// Plugin policies supported by CefRequestContextHandler::OnBeforePluginLoad.
///
type CPluginPolicyT C.cef_plugin_policy_t

const (

	///
	// Allow the content.
	///
	PluginPolicyAllow CPluginPolicyT = C.PLUGIN_POLICY_ALLOW

	///
	// Allow important content and block unimportant content based on heuristics.
	// The user can manually load blocked content.
	///
	PluginPolicyDetectImportant CPluginPolicyT = C.PLUGIN_POLICY_DETECT_IMPORTANT

	///
	// Block the content. The user can manually load blocked content.
	///
	PluginPolicyBlock CPluginPolicyT = C.PLUGIN_POLICY_BLOCK

	///
	// Disable the content. The user cannot load disabled content.
	///
	PluginPolicyDisable CPluginPolicyT = C.PLUGIN_POLICY_DISABLE
)

///
// Policy for how the Referrer HTTP header value will be sent during navigation.
// If the `--no-referrers` command-line flag is specified then the policy value
// will be ignored and the Referrer value will never be sent.
// Must be kept synchronized with net::URLRequest::ReferrerPolicy from Chromium.
///
type CReferrerPolicyT C.cef_referrer_policy_t

const (

	///
	// Clear the referrer header if the header value is HTTPS but the request
	// destination is HTTP. This is the default behavior.
	///
	ReferrerPolicyClearReferrerOnTransitionFromSecureToInsecure CReferrerPolicyT = C.REFERRER_POLICY_CLEAR_REFERRER_ON_TRANSITION_FROM_SECURE_TO_INSECURE
	ReferrerPolicyDefault                                       CReferrerPolicyT = C.REFERRER_POLICY_DEFAULT

	///
	// A slight variant on CLEAR_REFERRER_ON_TRANSITION_FROM_SECURE_TO_INSECURE:
	// If the request destination is HTTP, an HTTPS referrer will be cleared. If
	// the request's destination is cross-origin with the referrer (but does not
	// downgrade), the referrer's granularity will be stripped down to an origin
	// rather than a full URL. Same-origin requests will send the full referrer.
	///
	ReferrerPolicyReduceReferrerGranularityOnTransitionCrossOrigin CReferrerPolicyT = C.REFERRER_POLICY_REDUCE_REFERRER_GRANULARITY_ON_TRANSITION_CROSS_ORIGIN

	///
	// Strip the referrer down to an origin when the origin of the referrer is
	// different from the destination's origin.
	///
	ReferrerPolicyOriginOnlyOnTransitionCrossOrigin CReferrerPolicyT = C.REFERRER_POLICY_ORIGIN_ONLY_ON_TRANSITION_CROSS_ORIGIN

	///
	// Never change the referrer.
	///
	ReferrerPolicyNeverClearReferrer CReferrerPolicyT = C.REFERRER_POLICY_NEVER_CLEAR_REFERRER

	///
	// Strip the referrer down to the origin regardless of the redirect location.
	///
	ReferrerPolicyOrigin CReferrerPolicyT = C.REFERRER_POLICY_ORIGIN

	///
	// Clear the referrer when the request's referrer is cross-origin with the
	// request's destination.
	///
	ReferrerPolicyClearReferrerOnTransitionCrossOrigin CReferrerPolicyT = C.REFERRER_POLICY_CLEAR_REFERRER_ON_TRANSITION_CROSS_ORIGIN

	///
	// Strip the referrer down to the origin, but clear it entirely if the
	// referrer value is HTTPS and the destination is HTTP.
	///
	ReferrerPolicyOriginClearOnTransitionFromSecureToInsecure CReferrerPolicyT = C.REFERRER_POLICY_ORIGIN_CLEAR_ON_TRANSITION_FROM_SECURE_TO_INSECURE

	///
	// Always clear the referrer regardless of the request destination.
	///
	ReferrerPolicyNoReferrer CReferrerPolicyT = C.REFERRER_POLICY_NO_REFERRER

	// Always the last value in this enumeration.
	ReferrerPolicyLastValue CReferrerPolicyT = C.REFERRER_POLICY_LAST_VALUE
)

///
// Return values for CefResponseFilter::Filter().
///
type CResponseFilterStatusT C.cef_response_filter_status_t

const (

	///
	// Some or all of the pre-filter data was read successfully but more data is
	// needed in order to continue filtering (filtered output is pending).
	///
	ResponseFilterNeedMoreData CResponseFilterStatusT = C.RESPONSE_FILTER_NEED_MORE_DATA

	///
	// Some or all of the pre-filter data was read successfully and all available
	// filtered output has been written.
	///
	ResponseFilterDone CResponseFilterStatusT = C.RESPONSE_FILTER_DONE

	///
	// An error occurred during filtering.
	///
	ResponseFilterError CResponseFilterStatusT = C.RESPONSE_FILTER_ERROR
)

///
// Describes how to interpret the components of a pixel.
///
type CColorTypeT C.cef_color_type_t

const (

	///
	// RGBA with 8 bits per pixel (32bits total).
	///
	CefColorTypeRgba8888 CColorTypeT = C.CEF_COLOR_TYPE_RGBA_8888

	///
	// BGRA with 8 bits per pixel (32bits total).
	///
	CefColorTypeBgra8888 CColorTypeT = C.CEF_COLOR_TYPE_BGRA_8888
)

///
// Describes how to interpret the alpha component of a pixel.
///
type CAlphaTypeT C.cef_alpha_type_t

const (

	///
	// No transparency. The alpha component is ignored.
	///
	CefAlphaTypeOpaque CAlphaTypeT = C.CEF_ALPHA_TYPE_OPAQUE

	///
	// Transparency with pre-multiplied alpha component.
	///
	CefAlphaTypePremultiplied CAlphaTypeT = C.CEF_ALPHA_TYPE_PREMULTIPLIED

	///
	// Transparency with post-multiplied alpha component.
	///
	CefAlphaTypePostmultiplied CAlphaTypeT = C.CEF_ALPHA_TYPE_POSTMULTIPLIED
)

///
// Text style types. Should be kepy in sync with gfx::TextStyle.
///
type CTextStyleT C.cef_text_style_t

const (
	CefTextStyleBold           CTextStyleT = C.CEF_TEXT_STYLE_BOLD
	CefTextStyleItalic         CTextStyleT = C.CEF_TEXT_STYLE_ITALIC
	CefTextStyleStrike         CTextStyleT = C.CEF_TEXT_STYLE_STRIKE
	CefTextStyleDiagonalStrike CTextStyleT = C.CEF_TEXT_STYLE_DIAGONAL_STRIKE
	CefTextStyleUnderline      CTextStyleT = C.CEF_TEXT_STYLE_UNDERLINE
)

///
// Specifies where along the main axis the CefBoxLayout child views should be
// laid out.
///
type CMainAxisAlignmentT C.cef_main_axis_alignment_t

const (

	///
	// Child views will be left-aligned.
	///
	CefMainAxisAlignmentStart CMainAxisAlignmentT = C.CEF_MAIN_AXIS_ALIGNMENT_START

	///
	// Child views will be center-aligned.
	///
	CefMainAxisAlignmentCenter CMainAxisAlignmentT = C.CEF_MAIN_AXIS_ALIGNMENT_CENTER

	///
	// Child views will be right-aligned.
	///
	CefMainAxisAlignmentEnd CMainAxisAlignmentT = C.CEF_MAIN_AXIS_ALIGNMENT_END
)

///
// Specifies where along the cross axis the CefBoxLayout child views should be
// laid out.
///
type CCrossAxisAlignmentT C.cef_cross_axis_alignment_t

const (

	///
	// Child views will be stretched to fit.
	///
	CefCrossAxisAlignmentStretch CCrossAxisAlignmentT = C.CEF_CROSS_AXIS_ALIGNMENT_STRETCH

	///
	// Child views will be left-aligned.
	///
	CefCrossAxisAlignmentStart CCrossAxisAlignmentT = C.CEF_CROSS_AXIS_ALIGNMENT_START

	///
	// Child views will be center-aligned.
	///
	CefCrossAxisAlignmentCenter CCrossAxisAlignmentT = C.CEF_CROSS_AXIS_ALIGNMENT_CENTER

	///
	// Child views will be right-aligned.
	///
	CefCrossAxisAlignmentEnd CCrossAxisAlignmentT = C.CEF_CROSS_AXIS_ALIGNMENT_END
)

///
// Settings used when initializing a CefBoxLayout.
///
type CBoxLayoutSettingsT C.cef_box_layout_settings_t

func NewCBoxLayoutSettingsT() *CBoxLayoutSettingsT {
	s := &CBoxLayoutSettingsT{}
	return s
}

func (st *CBoxLayoutSettingsT) Horizontal() bool {
	return st.horizontal != 0
}

func (st *CBoxLayoutSettingsT) SetHorizontal(v bool) {
	if v {
		st.horizontal = 1
	} else {
		st.horizontal = 0
	}
}

func (st *CBoxLayoutSettingsT) InsideBorderHorizontalSpacing() int {
	return int(st.inside_border_horizontal_spacing)
}

func (st *CBoxLayoutSettingsT) SetInsideBorderHorizontalSpacing(v int) {
	st.inside_border_horizontal_spacing = (C.int)(v)
}

func (st *CBoxLayoutSettingsT) InsideBorderVerticalSpacing() int {
	return int(st.inside_border_vertical_spacing)
}

func (st *CBoxLayoutSettingsT) SetInsideBorderVerticalSpacing(v int) {
	st.inside_border_vertical_spacing = (C.int)(v)
}

func (st *CBoxLayoutSettingsT) InsideBorderInsets() CInsetsT {
	return CInsetsT(st.inside_border_insets)
}

func (st *CBoxLayoutSettingsT) SetInsideBorderInsets(v CInsetsT) {
	st.inside_border_insets = (C.cef_insets_t)(v)
}

func (st *CBoxLayoutSettingsT) BetweenChildSpacing() int {
	return int(st.between_child_spacing)
}

func (st *CBoxLayoutSettingsT) SetBetweenChildSpacing(v int) {
	st.between_child_spacing = (C.int)(v)
}

func (st *CBoxLayoutSettingsT) MainAxisAlignment() CMainAxisAlignmentT {
	return CMainAxisAlignmentT(st.main_axis_alignment)
}

func (st *CBoxLayoutSettingsT) SetMainAxisAlignment(v CMainAxisAlignmentT) {
	st.main_axis_alignment = (C.cef_main_axis_alignment_t)(v)
}

func (st *CBoxLayoutSettingsT) CrossAxisAlignment() CCrossAxisAlignmentT {
	return CCrossAxisAlignmentT(st.cross_axis_alignment)
}

func (st *CBoxLayoutSettingsT) SetCrossAxisAlignment(v CCrossAxisAlignmentT) {
	st.cross_axis_alignment = (C.cef_cross_axis_alignment_t)(v)
}

func (st *CBoxLayoutSettingsT) MinimumCrossAxisSize() int {
	return int(st.minimum_cross_axis_size)
}

func (st *CBoxLayoutSettingsT) SetMinimumCrossAxisSize(v int) {
	st.minimum_cross_axis_size = (C.int)(v)
}

func (st *CBoxLayoutSettingsT) DefaultFlex() int {
	return int(st.default_flex)
}

func (st *CBoxLayoutSettingsT) SetDefaultFlex(v int) {
	st.default_flex = (C.int)(v)
}

///
// Specifies the button display state.
///
type CButtonStateT C.cef_button_state_t

const (
	CefButtonStateNormal   CButtonStateT = C.CEF_BUTTON_STATE_NORMAL
	CefButtonStateHovered  CButtonStateT = C.CEF_BUTTON_STATE_HOVERED
	CefButtonStatePressed  CButtonStateT = C.CEF_BUTTON_STATE_PRESSED
	CefButtonStateDisabled CButtonStateT = C.CEF_BUTTON_STATE_DISABLED
)

///
// Specifies the horizontal text alignment mode.
///
type CHorizontalAlignmentT C.cef_horizontal_alignment_t

const (

	///
	// Align the text's left edge with that of its display area.
	///
	CefHorizontalAlignmentLeft CHorizontalAlignmentT = C.CEF_HORIZONTAL_ALIGNMENT_LEFT

	///
	// Align the text's center with that of its display area.
	///
	CefHorizontalAlignmentCenter CHorizontalAlignmentT = C.CEF_HORIZONTAL_ALIGNMENT_CENTER

	///
	// Align the text's right edge with that of its display area.
	///
	CefHorizontalAlignmentRight CHorizontalAlignmentT = C.CEF_HORIZONTAL_ALIGNMENT_RIGHT
)

///
// Specifies how a menu will be anchored for non-RTL languages. The opposite
// position will be used for RTL languages.
///
type CMenuAnchorPositionT C.cef_menu_anchor_position_t

const (
	CefMenuAnchorTopleft      CMenuAnchorPositionT = C.CEF_MENU_ANCHOR_TOPLEFT
	CefMenuAnchorTopright     CMenuAnchorPositionT = C.CEF_MENU_ANCHOR_TOPRIGHT
	CefMenuAnchorBottomcenter CMenuAnchorPositionT = C.CEF_MENU_ANCHOR_BOTTOMCENTER
)

///
// Supported color types for menu items.
///
type CMenuColorTypeT C.cef_menu_color_type_t

const (
	CefMenuColorText                   CMenuColorTypeT = C.CEF_MENU_COLOR_TEXT
	CefMenuColorTextHovered            CMenuColorTypeT = C.CEF_MENU_COLOR_TEXT_HOVERED
	CefMenuColorTextAccelerator        CMenuColorTypeT = C.CEF_MENU_COLOR_TEXT_ACCELERATOR
	CefMenuColorTextAcceleratorHovered CMenuColorTypeT = C.CEF_MENU_COLOR_TEXT_ACCELERATOR_HOVERED
	CefMenuColorBackground             CMenuColorTypeT = C.CEF_MENU_COLOR_BACKGROUND
	CefMenuColorBackgroundHovered      CMenuColorTypeT = C.CEF_MENU_COLOR_BACKGROUND_HOVERED
	CefMenuColorCount                  CMenuColorTypeT = C.CEF_MENU_COLOR_COUNT
)

// Supported SSL version values. See net/ssl/ssl_connection_status_flags.h
// for more information.
type CSslVersionT C.cef_ssl_version_t

const (
	SslConnectionVersionUnknown CSslVersionT = C.SSL_CONNECTION_VERSION_UNKNOWN
	SslConnectionVersionSsl2    CSslVersionT = C.SSL_CONNECTION_VERSION_SSL2
	SslConnectionVersionSsl3    CSslVersionT = C.SSL_CONNECTION_VERSION_SSL3
	SslConnectionVersionTls1    CSslVersionT = C.SSL_CONNECTION_VERSION_TLS1
	SslConnectionVersionTls11   CSslVersionT = C.SSL_CONNECTION_VERSION_TLS1_1
	SslConnectionVersionTls12   CSslVersionT = C.SSL_CONNECTION_VERSION_TLS1_2
	SslConnectionVersionTls13   CSslVersionT = C.SSL_CONNECTION_VERSION_TLS1_3
	SslConnectionVersionQuic    CSslVersionT = C.SSL_CONNECTION_VERSION_QUIC
)

// Supported SSL content status flags. See content/public/common/ssl_status.h
// for more information.
type CSslContentStatusT C.cef_ssl_content_status_t

const (
	SslContentNormalContent            CSslContentStatusT = C.SSL_CONTENT_NORMAL_CONTENT
	SslContentDisplayedInsecureContent CSslContentStatusT = C.SSL_CONTENT_DISPLAYED_INSECURE_CONTENT
	SslContentRanInsecureContent       CSslContentStatusT = C.SSL_CONTENT_RAN_INSECURE_CONTENT
)

//
// Configuration options for registering a custom scheme.
// These values are used when calling AddCustomScheme.
//
type CSchemeOptionsT C.cef_scheme_options_t

const (
	CefSchemeOptionNone CSchemeOptionsT = C.CEF_SCHEME_OPTION_NONE

	///
	// If CEF_SCHEME_OPTION_STANDARD is set the scheme will be treated as a
	// standard scheme. Standard schemes are subject to URL canonicalization and
	// parsing rules as defined in the Common Internet Scheme Syntax RFC 1738
	// Section 3.1 available at http://www.ietf.org/rfc/rfc1738.txt
	//
	// In particular, the syntax for standard scheme URLs must be of the form:
	// <pre>
	//  [scheme]://[username]:[password]@[host]:[port]/[url-path]
	// </pre> Standard scheme URLs must have a host component that is a fully
	// qualified domain name as defined in Section 3.5 of RFC 1034 [13] and
	// Section 2.1 of RFC 1123. These URLs will be canonicalized to
	// "scheme://host/path" in the simplest case and
	// "scheme://username:password@host:port/path" in the most explicit case. For
	// example, "scheme:host/path" and "scheme:///host/path" will both be
	// canonicalized to "scheme://host/path". The origin of a standard scheme URL
	// is the combination of scheme, host and port (i.e., "scheme://host:port" in
	// the most explicit case).
	//
	// For non-standard scheme URLs only the "scheme:" component is parsed and
	// canonicalized. The remainder of the URL will be passed to the handler as-
	// is. For example, "scheme:///some%20text" will remain the same. Non-standard
	// scheme URLs cannot be used as a target for form submission.
	///
	CefSchemeOptionStandard CSchemeOptionsT = C.CEF_SCHEME_OPTION_STANDARD

	///
	// If CEF_SCHEME_OPTION_LOCAL is set the scheme will be treated with the same
	// security rules as those applied to "file" URLs. Normal pages cannot link to
	// or access local URLs. Also, by default, local URLs can only perform
	// XMLHttpRequest calls to the same URL (origin + path) that originated the
	// request. To allow XMLHttpRequest calls from a local URL to other URLs with
	// the same origin set the CefSettings.file_access_from_file_urls_allowed
	// value to true (1). To allow XMLHttpRequest calls from a local URL to all
	// origins set the CefSettings.universal_access_from_file_urls_allowed value
	// to true (1).
	///
	CefSchemeOptionLocal CSchemeOptionsT = C.CEF_SCHEME_OPTION_LOCAL

	///
	// If CEF_SCHEME_OPTION_DISPLAY_ISOLATED is set the scheme can only be
	// displayed from other content hosted with the same scheme. For example,
	// pages in other origins cannot create iframes or hyperlinks to URLs with the
	// scheme. For schemes that must be accessible from other schemes don't set
	// this, set CEF_SCHEME_OPTION_CORS_ENABLED, and use CORS
	// "Access-Control-Allow-Origin" headers to further restrict access.
	///
	CefSchemeOptionDisplayIsolated CSchemeOptionsT = C.CEF_SCHEME_OPTION_DISPLAY_ISOLATED

	///
	// If CEF_SCHEME_OPTION_SECURE is set the scheme will be treated with the same
	// security rules as those applied to "https" URLs. For example, loading this
	// scheme from other secure schemes will not trigger mixed content warnings.
	///
	CefSchemeOptionSecure CSchemeOptionsT = C.CEF_SCHEME_OPTION_SECURE

	///
	// If CEF_SCHEME_OPTION_CORS_ENABLED is set the scheme can be sent CORS
	// requests. This value should be set in most cases where
	// CEF_SCHEME_OPTION_STANDARD is set.
	///
	CefSchemeOptionCorsEnabled CSchemeOptionsT = C.CEF_SCHEME_OPTION_CORS_ENABLED

	///
	// If CEF_SCHEME_OPTION_CSP_BYPASSING is set the scheme can bypass Content-
	// Security-Policy (CSP) checks. This value should not be set in most cases
	// where CEF_SCHEME_OPTION_STANDARD is set.
	///
	CefSchemeOptionCspBypassing CSchemeOptionsT = C.CEF_SCHEME_OPTION_CSP_BYPASSING

	///
	// If CEF_SCHEME_OPTION_FETCH_ENABLED is set the scheme can perform Fetch API
	// requests.
	///
	CefSchemeOptionFetchEnabled CSchemeOptionsT = C.CEF_SCHEME_OPTION_FETCH_ENABLED
)

///
// Error codes for CDM registration. See cef_web_plugin.h for details.
///
type CCdmRegistrationErrorT C.cef_cdm_registration_error_t

const (

	///
	// No error. Registration completed successfully.
	///
	CefCdmRegistrationErrorNone CCdmRegistrationErrorT = C.CEF_CDM_REGISTRATION_ERROR_NONE

	///
	// Required files or manifest contents are missing.
	///
	CefCdmRegistrationErrorIncorrectContents CCdmRegistrationErrorT = C.CEF_CDM_REGISTRATION_ERROR_INCORRECT_CONTENTS

	///
	// The CDM is incompatible with the current Chromium version.
	///
	CefCdmRegistrationErrorIncompatible CCdmRegistrationErrorT = C.CEF_CDM_REGISTRATION_ERROR_INCOMPATIBLE

	///
	// CDM registration is not supported at this time.
	///
	CefCdmRegistrationErrorNotSupported CCdmRegistrationErrorT = C.CEF_CDM_REGISTRATION_ERROR_NOT_SUPPORTED
)

///
// Composition underline style.
///
type CCompositionUnderlineStyleT C.cef_composition_underline_style_t

const (
	CefCusSolid CCompositionUnderlineStyleT = C.CEF_CUS_SOLID
	CefCusDot   CCompositionUnderlineStyleT = C.CEF_CUS_DOT
	CefCusDash  CCompositionUnderlineStyleT = C.CEF_CUS_DASH
	CefCusNone  CCompositionUnderlineStyleT = C.CEF_CUS_NONE
)

///
// Structure representing IME composition underline information. This is a thin
// wrapper around Blink's WebCompositionUnderline class and should be kept in
// sync with that.
///
type CCompositionUnderlineT C.cef_composition_underline_t

func NewCCompositionUnderlineT() *CCompositionUnderlineT {
	s := &CCompositionUnderlineT{}
	return s
}

func (st *CCompositionUnderlineT) Range() CRangeT {
	return CRangeT(st._range)
}

func (st *CCompositionUnderlineT) SetRange(v CRangeT) {
	st._range = (C.cef_range_t)(v)
}

func (st *CCompositionUnderlineT) Color() CColorT {
	return CColorT(st.color)
}

func (st *CCompositionUnderlineT) SetColor(v CColorT) {
	st.color = (C.cef_color_t)(v)
}

func (st *CCompositionUnderlineT) BackgroundColor() CColorT {
	return CColorT(st.background_color)
}

func (st *CCompositionUnderlineT) SetBackgroundColor(v CColorT) {
	st.background_color = (C.cef_color_t)(v)
}

func (st *CCompositionUnderlineT) Thick() bool {
	return st.thick != 0
}

func (st *CCompositionUnderlineT) SetThick(v bool) {
	if v {
		st.thick = 1
	} else {
		st.thick = 0
	}
}

func (st *CCompositionUnderlineT) Style() CCompositionUnderlineStyleT {
	return CCompositionUnderlineStyleT(st.style)
}

func (st *CCompositionUnderlineT) SetStyle(v CCompositionUnderlineStyleT) {
	st.style = (C.cef_composition_underline_style_t)(v)
}

///
// Enumerates the various representations of the ordering of audio channels.
// Must be kept synchronized with media::ChannelLayout from Chromium.
// See media\base\channel_layout.h
///
type CChannelLayoutT C.cef_channel_layout_t

const (
	CefChannelLayoutNone        CChannelLayoutT = C.CEF_CHANNEL_LAYOUT_NONE
	CefChannelLayoutUnsupported CChannelLayoutT = C.CEF_CHANNEL_LAYOUT_UNSUPPORTED

	// Front C
	CefChannelLayoutMono CChannelLayoutT = C.CEF_CHANNEL_LAYOUT_MONO

	// Front L, Front R
	CefChannelLayoutStereo CChannelLayoutT = C.CEF_CHANNEL_LAYOUT_STEREO

	// Front L, Front R, Back C
	CefChannelLayout21 CChannelLayoutT = C.CEF_CHANNEL_LAYOUT_2_1

	// Front L, Front R, Front C
	CefChannelLayoutSurround CChannelLayoutT = C.CEF_CHANNEL_LAYOUT_SURROUND

	// Front L, Front R, Front C, Back C
	CefChannelLayout40 CChannelLayoutT = C.CEF_CHANNEL_LAYOUT_4_0

	// Front L, Front R, Side L, Side R
	CefChannelLayout22 CChannelLayoutT = C.CEF_CHANNEL_LAYOUT_2_2

	// Front L, Front R, Back L, Back R
	CefChannelLayoutQuad CChannelLayoutT = C.CEF_CHANNEL_LAYOUT_QUAD

	// Front L, Front R, Front C, Side L, Side R
	CefChannelLayout50 CChannelLayoutT = C.CEF_CHANNEL_LAYOUT_5_0

	// Front L, Front R, Front C, LFE, Side L, Side R
	CefChannelLayout51 CChannelLayoutT = C.CEF_CHANNEL_LAYOUT_5_1

	// Front L, Front R, Front C, Back L, Back R
	CefChannelLayout50Back CChannelLayoutT = C.CEF_CHANNEL_LAYOUT_5_0_BACK

	// Front L, Front R, Front C, LFE, Back L, Back R
	CefChannelLayout51Back CChannelLayoutT = C.CEF_CHANNEL_LAYOUT_5_1_BACK

	// Front L, Front R, Front C, Side L, Side R, Back L, Back R
	CefChannelLayout70 CChannelLayoutT = C.CEF_CHANNEL_LAYOUT_7_0

	// Front L, Front R, Front C, LFE, Side L, Side R, Back L, Back R
	CefChannelLayout71 CChannelLayoutT = C.CEF_CHANNEL_LAYOUT_7_1

	// Front L, Front R, Front C, LFE, Side L, Side R, Front LofC, Front RofC
	CefChannelLayout71Wide CChannelLayoutT = C.CEF_CHANNEL_LAYOUT_7_1_WIDE

	// Stereo L, Stereo R
	CefChannelLayoutStereoDownmix CChannelLayoutT = C.CEF_CHANNEL_LAYOUT_STEREO_DOWNMIX

	// Stereo L, Stereo R, LFE
	CefChannelLayout2point1 CChannelLayoutT = C.CEF_CHANNEL_LAYOUT_2POINT1

	// Stereo L, Stereo R, Front C, LFE
	CefChannelLayout31 CChannelLayoutT = C.CEF_CHANNEL_LAYOUT_3_1

	// Stereo L, Stereo R, Front C, Rear C, LFE
	CefChannelLayout41 CChannelLayoutT = C.CEF_CHANNEL_LAYOUT_4_1

	// Stereo L, Stereo R, Front C, Side L, Side R, Back C
	CefChannelLayout60 CChannelLayoutT = C.CEF_CHANNEL_LAYOUT_6_0

	// Stereo L, Stereo R, Side L, Side R, Front LofC, Front RofC
	CefChannelLayout60Front CChannelLayoutT = C.CEF_CHANNEL_LAYOUT_6_0_FRONT

	// Stereo L, Stereo R, Front C, Rear L, Rear R, Rear C
	CefChannelLayoutHexagonal CChannelLayoutT = C.CEF_CHANNEL_LAYOUT_HEXAGONAL

	// Stereo L, Stereo R, Front C, LFE, Side L, Side R, Rear Center
	CefChannelLayout61 CChannelLayoutT = C.CEF_CHANNEL_LAYOUT_6_1

	// Stereo L, Stereo R, Front C, LFE, Back L, Back R, Rear Center
	CefChannelLayout61Back CChannelLayoutT = C.CEF_CHANNEL_LAYOUT_6_1_BACK

	// Stereo L, Stereo R, Side L, Side R, Front LofC, Front RofC, LFE
	CefChannelLayout61Front CChannelLayoutT = C.CEF_CHANNEL_LAYOUT_6_1_FRONT

	// Front L, Front R, Front C, Side L, Side R, Front LofC, Front RofC
	CefChannelLayout70Front CChannelLayoutT = C.CEF_CHANNEL_LAYOUT_7_0_FRONT

	// Front L, Front R, Front C, LFE, Back L, Back R, Front LofC, Front RofC
	CefChannelLayout71WideBack CChannelLayoutT = C.CEF_CHANNEL_LAYOUT_7_1_WIDE_BACK

	// Front L, Front R, Front C, Side L, Side R, Rear L, Back R, Back C.
	CefChannelLayoutOctagonal CChannelLayoutT = C.CEF_CHANNEL_LAYOUT_OCTAGONAL

	// Channels are not explicitly mapped to speakers.
	CefChannelLayoutDiscrete CChannelLayoutT = C.CEF_CHANNEL_LAYOUT_DISCRETE

	// Front L, Front R, Front C. Front C contains the keyboard mic audio. This
	// layout is only intended for input for WebRTC. The Front C channel
	// is stripped away in the WebRTC audio input pipeline and never seen outside
	// of that.
	CefChannelLayoutStereoAndKeyboardMic CChannelLayoutT = C.CEF_CHANNEL_LAYOUT_STEREO_AND_KEYBOARD_MIC

	// Front L, Front R, Side L, Side R, LFE
	CefChannelLayout41QuadSide CChannelLayoutT = C.CEF_CHANNEL_LAYOUT_4_1_QUAD_SIDE

	// Actual channel layout is specified in the bitstream and the actual channel
	// count is unknown at Chromium media pipeline level (useful for audio
	// pass-through mode).
	CefChannelLayoutBitstream CChannelLayoutT = C.CEF_CHANNEL_LAYOUT_BITSTREAM

	// Max value, must always equal the largest entry ever logged.
	CefChannelLayoutMax CChannelLayoutT = C.CEF_CHANNEL_LAYOUT_MAX
)

///
// Structure representing the audio parameters for setting up the audio handler.
///
type CAudioParametersT C.cef_audio_parameters_t

func NewCAudioParametersT() *CAudioParametersT {
	s := &CAudioParametersT{}
	return s
}

func (st *CAudioParametersT) ChannelLayout() CChannelLayoutT {
	return CChannelLayoutT(st.channel_layout)
}

func (st *CAudioParametersT) SetChannelLayout(v CChannelLayoutT) {
	st.channel_layout = (C.cef_channel_layout_t)(v)
}

func (st *CAudioParametersT) SampleRate() int {
	return int(st.sample_rate)
}

func (st *CAudioParametersT) SetSampleRate(v int) {
	st.sample_rate = (C.int)(v)
}

func (st *CAudioParametersT) FramesPerBuffer() int {
	return int(st.frames_per_buffer)
}

func (st *CAudioParametersT) SetFramesPerBuffer(v int) {
	st.frames_per_buffer = (C.int)(v)
}

///
// Result codes for CefMediaRouter::CreateRoute. Should be kept in sync with
// Chromium's media_router::RouteRequestResult::ResultCode type.
///
type CMediaRouteCreateResultT C.cef_media_route_create_result_t

const (
	CefMrcrUnknownError        CMediaRouteCreateResultT = C.CEF_MRCR_UNKNOWN_ERROR
	CefMrcrOk                  CMediaRouteCreateResultT = C.CEF_MRCR_OK
	CefMrcrTimedOut            CMediaRouteCreateResultT = C.CEF_MRCR_TIMED_OUT
	CefMrcrRouteNotFound       CMediaRouteCreateResultT = C.CEF_MRCR_ROUTE_NOT_FOUND
	CefMrcrSinkNotFound        CMediaRouteCreateResultT = C.CEF_MRCR_SINK_NOT_FOUND
	CefMrcrInvalidOrigin       CMediaRouteCreateResultT = C.CEF_MRCR_INVALID_ORIGIN
	CefMrcrNoSupportedProvider CMediaRouteCreateResultT = C.CEF_MRCR_NO_SUPPORTED_PROVIDER
	CefMrcrCancelled           CMediaRouteCreateResultT = C.CEF_MRCR_CANCELLED
	CefMrcrRouteAlreadyExists  CMediaRouteCreateResultT = C.CEF_MRCR_ROUTE_ALREADY_EXISTS
	CefMrcrTotalCount          CMediaRouteCreateResultT = C.CEF_MRCR_TOTAL_COUNT
)

///
// Connection state for a MediaRoute object.
///
type CMediaRouteConnectionStateT C.cef_media_route_connection_state_t

const (
	CefMrcsUnknown    CMediaRouteConnectionStateT = C.CEF_MRCS_UNKNOWN
	CefMrcsConnecting CMediaRouteConnectionStateT = C.CEF_MRCS_CONNECTING
	CefMrcsConnected  CMediaRouteConnectionStateT = C.CEF_MRCS_CONNECTED
	CefMrcsClosed     CMediaRouteConnectionStateT = C.CEF_MRCS_CLOSED
	CefMrcsTerminated CMediaRouteConnectionStateT = C.CEF_MRCS_TERMINATED
)

///
// Icon types for a MediaSink object. Should be kept in sync with Chromium's
// media_router::SinkIconType type.
///
type CMediaSinkIconTypeT C.cef_media_sink_icon_type_t

const (
	CefMsitCast           CMediaSinkIconTypeT = C.CEF_MSIT_CAST
	CefMsitCastAudioGroup CMediaSinkIconTypeT = C.CEF_MSIT_CAST_AUDIO_GROUP
	CefMsitCastAudio      CMediaSinkIconTypeT = C.CEF_MSIT_CAST_AUDIO
	CefMsitMeeting        CMediaSinkIconTypeT = C.CEF_MSIT_MEETING
	CefMsitHangout        CMediaSinkIconTypeT = C.CEF_MSIT_HANGOUT
	CefMsitEducation      CMediaSinkIconTypeT = C.CEF_MSIT_EDUCATION
	CefMsitWiredDisplay   CMediaSinkIconTypeT = C.CEF_MSIT_WIRED_DISPLAY
	CefMsitGeneric        CMediaSinkIconTypeT = C.CEF_MSIT_GENERIC
	CefMsitTotalCount     CMediaSinkIconTypeT = C.CEF_MSIT_TOTAL_COUNT
)

///
// Device information for a MediaSink object.
///
type CMediaSinkDeviceInfoT C.cef_media_sink_device_info_t

func NewCMediaSinkDeviceInfoT() *CMediaSinkDeviceInfoT {
	s := &CMediaSinkDeviceInfoT{}
	return s
}

func (st *CMediaSinkDeviceInfoT) IpAddress() string {
	return string_from_cef_string(&st.ip_address)
}

func (st *CMediaSinkDeviceInfoT) SetIpAddress(v string) {
	set_cef_string(&st.ip_address, v)
}

func (st *CMediaSinkDeviceInfoT) Port() int {
	return int(st.port)
}

func (st *CMediaSinkDeviceInfoT) SetPort(v int) {
	st.port = (C.int)(v)
}

func (st *CMediaSinkDeviceInfoT) ModelName() string {
	return string_from_cef_string(&st.model_name)
}

func (st *CMediaSinkDeviceInfoT) SetModelName(v string) {
	set_cef_string(&st.model_name, v)
}

///
// Represents commands available to TextField.
///
type CTextFieldCommandsT C.cef_text_field_commands_t

const (
	CefTfcCut       CTextFieldCommandsT = C.CEF_TFC_CUT
	CefTfcCopy      CTextFieldCommandsT = C.CEF_TFC_COPY
	CefTfcPaste     CTextFieldCommandsT = C.CEF_TFC_PASTE
	CefTfcUndo      CTextFieldCommandsT = C.CEF_TFC_UNDO
	CefTfcDelete    CTextFieldCommandsT = C.CEF_TFC_DELETE
	CefTfcSelectAll CTextFieldCommandsT = C.CEF_TFC_SELECT_ALL
)
