// Code generated by "gen_cef_types.go" DO NOT EDIT.

package capi

import (
	"runtime"
	"unsafe"
)

// #include "cefingo.h"
import "C"

// Go type for cef_app_t
type CAppT struct {
	p_app *C.cef_app_t
}

type RefToCAppT struct {
	p_app *CAppT
}

type CAppTAccessor interface {
	GetCAppT() *CAppT
	SetCAppT(*CAppT)
}

func (r RefToCAppT) GetCAppT() *CAppT {
	return r.p_app
}

func (r *RefToCAppT) SetCAppT(p *CAppT) {
	r.p_app = p
}

// Go type CAppT wraps cef type *C.cef_app_t
func newCAppT(p *C.cef_app_t) *CAppT {
	Tracef(unsafe.Pointer(p), "L37:")
	BaseAddRef(p)
	go_app := CAppT{p}
	runtime.SetFinalizer(&go_app, func(g *CAppT) {
		Tracef(unsafe.Pointer(g.p_app), "L41:")
		BaseRelease(g.p_app)
	})
	return &go_app
}

// *C.cef_app_t has refCounted interface
func (p *C.cef_app_t) cast_to_p_base_ref_counted_t() *C.cef_base_ref_counted_t {
	return (*C.cef_base_ref_counted_t)(unsafe.Pointer(p))
}

// Go type for cef_browser_t
type CBrowserT struct {
	p_browser *C.cef_browser_t
}

type RefToCBrowserT struct {
	p_browser *CBrowserT
}

type CBrowserTAccessor interface {
	GetCBrowserT() *CBrowserT
	SetCBrowserT(*CBrowserT)
}

func (r RefToCBrowserT) GetCBrowserT() *CBrowserT {
	return r.p_browser
}

func (r *RefToCBrowserT) SetCBrowserT(p *CBrowserT) {
	r.p_browser = p
}

// Go type CBrowserT wraps cef type *C.cef_browser_t
func newCBrowserT(p *C.cef_browser_t) *CBrowserT {
	Tracef(unsafe.Pointer(p), "L76:")
	BaseAddRef(p)
	go_browser := CBrowserT{p}
	runtime.SetFinalizer(&go_browser, func(g *CBrowserT) {
		Tracef(unsafe.Pointer(g.p_browser), "L80:")
		BaseRelease(g.p_browser)
	})
	return &go_browser
}

// *C.cef_browser_t has refCounted interface
func (p *C.cef_browser_t) cast_to_p_base_ref_counted_t() *C.cef_base_ref_counted_t {
	return (*C.cef_base_ref_counted_t)(unsafe.Pointer(p))
}

// Go type for cef_browser_process_handler_t
type CBrowserProcessHandlerT struct {
	p_browser_process_handler *C.cef_browser_process_handler_t
}

type RefToCBrowserProcessHandlerT struct {
	p_browser_process_handler *CBrowserProcessHandlerT
}

type CBrowserProcessHandlerTAccessor interface {
	GetCBrowserProcessHandlerT() *CBrowserProcessHandlerT
	SetCBrowserProcessHandlerT(*CBrowserProcessHandlerT)
}

func (r RefToCBrowserProcessHandlerT) GetCBrowserProcessHandlerT() *CBrowserProcessHandlerT {
	return r.p_browser_process_handler
}

func (r *RefToCBrowserProcessHandlerT) SetCBrowserProcessHandlerT(p *CBrowserProcessHandlerT) {
	r.p_browser_process_handler = p
}

// Go type CBrowserProcessHandlerT wraps cef type *C.cef_browser_process_handler_t
func newCBrowserProcessHandlerT(p *C.cef_browser_process_handler_t) *CBrowserProcessHandlerT {
	Tracef(unsafe.Pointer(p), "L115:")
	BaseAddRef(p)
	go_browser_process_handler := CBrowserProcessHandlerT{p}
	runtime.SetFinalizer(&go_browser_process_handler, func(g *CBrowserProcessHandlerT) {
		Tracef(unsafe.Pointer(g.p_browser_process_handler), "L119:")
		BaseRelease(g.p_browser_process_handler)
	})
	return &go_browser_process_handler
}

// *C.cef_browser_process_handler_t has refCounted interface
func (p *C.cef_browser_process_handler_t) cast_to_p_base_ref_counted_t() *C.cef_base_ref_counted_t {
	return (*C.cef_base_ref_counted_t)(unsafe.Pointer(p))
}

// Go type for cef_run_file_dialog_callback_t
type CRunFileDialogCallbackT struct {
	p_run_file_dialog_callback *C.cef_run_file_dialog_callback_t
}

type RefToCRunFileDialogCallbackT struct {
	p_run_file_dialog_callback *CRunFileDialogCallbackT
}

type CRunFileDialogCallbackTAccessor interface {
	GetCRunFileDialogCallbackT() *CRunFileDialogCallbackT
	SetCRunFileDialogCallbackT(*CRunFileDialogCallbackT)
}

func (r RefToCRunFileDialogCallbackT) GetCRunFileDialogCallbackT() *CRunFileDialogCallbackT {
	return r.p_run_file_dialog_callback
}

func (r *RefToCRunFileDialogCallbackT) SetCRunFileDialogCallbackT(p *CRunFileDialogCallbackT) {
	r.p_run_file_dialog_callback = p
}

// Go type CRunFileDialogCallbackT wraps cef type *C.cef_run_file_dialog_callback_t
func newCRunFileDialogCallbackT(p *C.cef_run_file_dialog_callback_t) *CRunFileDialogCallbackT {
	Tracef(unsafe.Pointer(p), "L154:")
	BaseAddRef(p)
	go_run_file_dialog_callback := CRunFileDialogCallbackT{p}
	runtime.SetFinalizer(&go_run_file_dialog_callback, func(g *CRunFileDialogCallbackT) {
		Tracef(unsafe.Pointer(g.p_run_file_dialog_callback), "L158:")
		BaseRelease(g.p_run_file_dialog_callback)
	})
	return &go_run_file_dialog_callback
}

// *C.cef_run_file_dialog_callback_t has refCounted interface
func (p *C.cef_run_file_dialog_callback_t) cast_to_p_base_ref_counted_t() *C.cef_base_ref_counted_t {
	return (*C.cef_base_ref_counted_t)(unsafe.Pointer(p))
}
